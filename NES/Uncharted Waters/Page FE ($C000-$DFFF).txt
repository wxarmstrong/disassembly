Page FE
ROM: 7C010 - 7E00F
----------------------------------------------------
Function $C000

 1F:C000:4C F7 CD  JMP $CDF7 -> Print crash message and hang game
---------------------------------------------------- 
Function $C003 -> Print string <00> (<02> = ?)

 1F:C003:20 99 E2  JSR $E299 (80 FF)
 <arg00> $000A - String pointer
 <arg02> $000C - ?
 
 1F:C009:A0 0B     LDY #$0B
 1F:C00B:B1 04     LDA ($04),Y
 1F:C00D:85 0A     STA $000A
 1F:C00F:C8        INY
 1F:C010:B1 04     LDA ($04),Y
 1F:C012:85 0B     STA $000B   / $0A = String ptr
 
 1F:C014:C8        INY
 1F:C015:B1 04     LDA ($04),YO
 1F:C017:85 0C     STA $000C   / $0C = ?
 
 1F:C019:A0 00     LDY #$00
 1F:C01B:A2 0E     LDX #$0E
 
 1F:C01D:CA        DEX
 1F:C01E:94 52     STY $52,X
 1F:C020:CA        DEX
 1F:C021:D0 FA     BNE $C01D
 
 1F:C023:84 14     STY $0014 
 1F:C025:84 19     STY $0019
 1F:C027:84 18     STY $0018
 1F:C029:84 17     STY $0017
 1F:C02B:AD 86 72  LDA $7286
 1F:C02E:85 15     STA $0015
 1F:C030:20 44 C4  JSR $C444
 
 1F:C033:AD 8E 72  LDA $728E
 1F:C036:0A        ASL
 1F:C037:0A        ASL
 1F:C038:0A        ASL
 1F:C039:0A        ASL
 1F:C03A:0A        ASL
 1F:C03B:0A        ASL
 1F:C03C:85 13     STA $0013
 1F:C03E:A0 00     LDY #$00
 1F:C040:B1 0A     LDA ($0A),Y
 1F:C042:D0 03     BNE $C047
 1F:C044:4C 25 C3  JMP $C325
 
 while (null character has not yet been reached)
 
 1F:C047:85 0D     STA $000D = #$80
 1F:C049:C8        INY
 1F:C04A:B1 0A     LDA ($0A),Y @ $D771 = #$D3
 1F:C04C:85 12     STA $0012 = #$00
 1F:C04E:88        DEY
 1F:C04F:A5 0D     LDA $000D = #$80
 1F:C051:C9 20     CMP #$20
 1F:C053:90 2A     BCC $C07F
 1F:C055:C9 80     CMP #$80
 1F:C057:B0 29     BCS $C082
 1F:C059:38        SEC
 1F:C05A:E9 20     SBC #$20
 1F:C05C:91 08     STA ($08),Y @ $67A6 = #$00
 1F:C05E:20 66 C3  JSR $C366
 1F:C061:A5 13     LDA $0013 = #$C0
 1F:C063:91 10     STA ($10),Y @ $0010 = #$0F
 1F:C065:20 74 C3  JSR $C374
 1F:C068:A9 00     LDA #$00
 1F:C06A:91 1A     STA ($1A),Y @ $04FC = #$39
 1F:C06C:91 0E     STA ($0E),Y @ $4785 = #$FF
 1F:C06E:20 6D C3  JSR $C36D
 1F:C071:20 7B C3  JSR $C37B
 1F:C074:EE 86 72  INC $7286 = #$17
 1F:C077:E6 16     INC $0016 = #$06
 1F:C079:4C D8 C2  JMP $C2D8
 1F:C07C:4C 79 C1  JMP $C179
 1F:C07F:4C A3 C1  JMP $C1A3
 1F:C082:C9 A0     CMP #$A0
 1F:C084:90 F3     BCC $C079
 1F:C086:C9 DE     CMP #$DE
 1F:C088:B0 F2     BCS $C07C
 1F:C08A:A5 14     LDA $0014 = #$00
 1F:C08C:F0 07     BEQ $C095
 1F:C08E:A5 0D     LDA $000D = #$05
 1F:C090:38        SEC
 1F:C091:E9 40     SBC #$40
 1F:C093:85 0D     STA $000D = #$05
 1F:C095:A5 12     LDA $0012 = #$00
 1F:C097:C9 DE     CMP #$DE
 1F:C099:F0 03     BEQ $C09E
 1F:C09B:4C 04 C1  JMP $C104
 1F:C09E:A2 0A     LDX #$0A
 1F:C0A0:20 5F C3  JSR $C35F             / Increment $0A-$0B
 1F:C0A3:A5 0C     LDA $000C = #$21
 1F:C0A5:F0 0D     BEQ $C0B4
 1F:C0A7:A9 9E     LDA #$9E
 1F:C0A9:91 1A     STA ($1A),Y @ $04FC = #$39
 1F:C0AB:20 6D C3  JSR $C36D
 1F:C0AE:20 2F C4  JSR $C42F
 1F:C0B1:4C 44 C1  JMP $C144
 1F:C0B4:A5 0D     LDA $000D = #$05
 1F:C0B6:C9 76     CMP #$76
 1F:C0B8:90 3C     BCC $C0F6
 1F:C0BA:C9 85     CMP #$85
 1F:C0BC:B0 08     BCS $C0C6
 1F:C0BE:38        SEC
 1F:C0BF:E9 76     SBC #$76
 1F:C0C1:85 0D     STA $000D = #$05
 1F:C0C3:4C FA C0  JMP $C0FA
 1F:C0C6:C9 8A     CMP #$8A
 1F:C0C8:90 2C     BCC $C0F6
 1F:C0CA:C9 8F     CMP #$8F
 1F:C0CC:B0 08     BCS $C0D6
 1F:C0CE:38        SEC
 1F:C0CF:E9 7B     SBC #$7B
 1F:C0D1:85 0D     STA $000D = #$05
 1F:C0D3:4C FA C0  JMP $C0FA
 1F:C0D6:C9 B6     CMP #$B6
 1F:C0D8:90 1C     BCC $C0F6
 1F:C0DA:C9 C5     CMP #$C5
 1F:C0DC:B0 08     BCS $C0E6
 1F:C0DE:38        SEC
 1F:C0DF:E9 9D     SBC #$9D
 1F:C0E1:85 0D     STA $000D = #$05
 1F:C0E3:4C FA C0  JMP $C0FA
 1F:C0E6:C9 CA     CMP #$CA
 1F:C0E8:90 0C     BCC $C0F6
 1F:C0EA:C9 CF     CMP #$CF
 1F:C0EC:B0 08     BCS $C0F6
 1F:C0EE:38        SEC
 1F:C0EF:E9 A2     SBC #$A2
 1F:C0F1:85 0D     STA $000D = #$05
 1F:C0F3:4C FA C0  JMP $C0FA
 1F:C0F6:A9 01     LDA #$01
 1F:C0F8:85 19     STA $0019 = #$00
 1F:C0FA:A5 13     LDA $0013 = #$40
 1F:C0FC:18        CLC
 1F:C0FD:69 01     ADC #$01
 1F:C0FF:91 10     STA ($10),Y @ $0001 = #$EE
 1F:C101:4C 44 C1  JMP $C144
 1F:C104:C9 DF     CMP #$DF
 1F:C106:D0 38     BNE $C140
 1F:C108:A2 0A     LDX #$0A              
 1F:C10A:20 5F C3  JSR $C35F             / Increment $0A/$0B
 1F:C10D:A5 0C     LDA $000C = #$21
 1F:C10F:F0 0D     BEQ $C11E
 1F:C111:A9 9F     LDA #$9F
 1F:C113:91 1A     STA ($1A),Y @ $04FC = #$39
 1F:C115:20 6D C3  JSR $C36D
 1F:C118:20 2F C4  JSR $C42F
 1F:C11B:4C 44 C1  JMP $C144
 1F:C11E:A5 0D     LDA $000D = #$05
 1F:C120:C9 CA     CMP #$CA
 1F:C122:90 0C     BCC $C130
 1F:C124:C9 CF     CMP #$CF
 1F:C126:B0 CE     BCS $C0F6
 1F:C128:38        SEC
 1F:C129:E9 9D     SBC #$9D
 1F:C12B:85 0D     STA $000D = #$05
 1F:C12D:4C FA C0  JMP $C0FA
 1F:C130:C9 8A     CMP #$8A
 1F:C132:90 C2     BCC $C0F6
 1F:C134:C9 8F     CMP #$8F
 1F:C136:B0 BE     BCS $C0F6
 1F:C138:38        SEC
 1F:C139:E9 76     SBC #$76
 1F:C13B:85 0D     STA $000D = #$05
 1F:C13D:4C FA C0  JMP $C0FA
 1F:C140:A5 13     LDA $0013 = #$40
 1F:C142:91 10     STA ($10),Y @ $0001 = #$EE
 1F:C144:A5 19     LDA $0019 = #$00
 1F:C146:F0 0B     BEQ $C153
 1F:C148:A5 13     LDA $0013 = #$40
 1F:C14A:91 10     STA ($10),Y @ $0001 = #$EE
 
 1F:C14C:A2 0A     LDX #$0A
 1F:C14E:A9 01     LDA #$01
 1F:C150:20 50 E1  JSR $E150 ; Decrement $0A
 
 1F:C153:A5 18     LDA $0018 = #$00
 1F:C155:D0 13     BNE $C16A
 1F:C157:A9 00     LDA #$00
 1F:C159:91 1A     STA ($1A),Y @ $04FC = #$39
 1F:C15B:91 0E     STA ($0E),Y @ $4785 = #$FF
 1F:C15D:20 6D C3  JSR $C36D
 1F:C160:20 7B C3  JSR $C37B
 1F:C163:A5 0D     LDA $000D = #$05
 1F:C165:91 08     STA ($08),Y @ $0001 = #$EE
 1F:C167:20 66 C3  JSR $C366
 1F:C16A:20 74 C3  JSR $C374
 1F:C16D:EE 86 72  INC $7286 = #$17
 1F:C170:E6 16     INC $0016 = #$06
 1F:C172:84 18     STY $0018 = #$00
 1F:C174:84 19     STY $0019 = #$00
 1F:C176:4C D8 C2  JMP $C2D8
 1F:C179:C9 DE     CMP #$DE
 1F:C17B:F0 04     BEQ $C181
 1F:C17D:C9 DF     CMP #$DF
 1F:C17F:D0 22     BNE $C1A3
 1F:C181:A5 13     LDA $0013 = #$40
 1F:C183:91 10     STA ($10),Y @ $0001 = #$EE
 1F:C185:20 74 C3  JSR $C374
 1F:C188:A9 00     LDA #$00
 1F:C18A:91 1A     STA ($1A),Y @ $04FC = #$39
 1F:C18C:91 0E     STA ($0E),Y @ $4785 = #$FF
 1F:C18E:20 6D C3  JSR $C36D
 1F:C191:20 7B C3  JSR $C37B
 1F:C194:A5 0D     LDA $000D = #$05
 1F:C196:91 08     STA ($08),Y @ $0001 = #$EE
 1F:C198:20 66 C3  JSR $C366
 1F:C19B:EE 86 72  INC $7286 = #$17
 1F:C19E:E6 16     INC $0016 = #$06
 1F:C1A0:4C D8 C2  JMP $C2D8
 1F:C1A3:C9 0A     CMP #$0A
 1F:C1A5:D0 07     BNE $C1AE
 1F:C1A7:A9 01     LDA #$01
 1F:C1A9:85 17     STA $0017 = #$00
 1F:C1AB:4C D8 C2  JMP $C2D8
 1F:C1AE:C9 1B     CMP #$1B
 1F:C1B0:F0 03     BEQ $C1B5
 1F:C1B2:4C D8 C2  JMP $C2D8
 1F:C1B5:A5 16     LDA $0016 = #$06
 1F:C1B7:F0 0B     BEQ $C1C4
 1F:C1B9:20 82 C3  JSR $C382
 1F:C1BC:AD 86 72  LDA $7286 = #$17
 1F:C1BF:85 15     STA $0015 = #$11
 1F:C1C1:20 44 C4  JSR $C444
 1F:C1C4:A2 0A     LDX #$0A
 1F:C1C6:20 5F C3  JSR $C35F              / Increment $0A/$0B
 1F:C1C9:A5 12     LDA $0012 = #$00
 1F:C1DC:4C EA C2  JMP $C2EA
 1F:C1DF:C9 3D     CMP #$3D
 1F:C1E1:90 52     BCC $C235
 1F:C1E3:D0 1F     BNE $C204
 1F:C1E5:A2 0A     LDX #$0A
 1F:C1E7:20 5F C3  JSR $C35F              / Increment $0A/$0B
 1F:C1EA:B1 0A     LDA ($0A),Y @ $7295 = #$47
 1F:C1EC:38        SEC
 1F:C1ED:E9 20     SBC #$20
 1F:C1EF:8D 88 72  STA $7288 = #$15
 1F:C1F2:A2 0A     LDX #$0A             
 1F:C1F4:20 5F C3  JSR $C35F              / Increment $0A/$0B
 1F:C1F7:B1 0A     LDA ($0A),Y @ $7295 = #$47 
 1F:C1F9:38        SEC
 1F:C1FA:E9 20     SBC #$20
 1F:C1FC:8D 86 72  STA $7286 = #$17
 1F:C1FF:85 15     STA $0015 = #$11
 1F:C201:4C EA C2  JMP $C2EA
 1F:C204:C9 43     CMP #$43
 1F:C206:90 2D     BCC $C235
 1F:C208:D0 18     BNE $C222
 1F:C20A:A2 0A     LDX #$0A
 1F:C20C:20 5F C3  JSR $C35F             / Increment $0A/$0B
 1F:C20F:B1 0A     LDA ($0A),Y @ $7295 = #$47
 1F:C211:38        SEC
 1F:C212:E9 30     SBC #$30
 1F:C214:8D 8E 72  STA $728E = #$00
 1F:C217:0A        ASL
 1F:C218:0A        ASL
 1F:C219:0A        ASL
 1F:C21A:0A        ASL
 1F:C21B:0A        ASL
 1F:C21C:0A        ASL
 1F:C21D:85 13     STA $0013 = #$40
 1F:C21F:4C EA C2  JMP $C2EA
--------------------------------------------
 1F:C222:C9 45     CMP #$45
 1F:C224:90 0F     BCC $C235
 1F:C226:D0 10     BNE $C238
--------------------------------------------
 Escape Character + #$45
 
 1F:C228:A2 0A     LDX #$0A
 1F:C22A:20 5F C3  JSR $C35F             / Increment $0A/$0B
 1F:C22D:B1 0A     LDA ($0A),Y @ $7295 = #$47
 1F:C22F:38        SEC
 1F:C230:E9 20     SBC #$20
 1F:C232:8D 8C 72  STA $728C = #$1D
 1F:C235:4C EA C2  JMP $C2EA
--------------------------------------------
 1F:C238:C9 48     CMP #$48
 1F:C23A:90 F9     BCC $C235
 1F:C23C:D0 05     BNE $C243
--------------------------------------------
 Escape Character + #$48
 
 1F:C23E:84 14     STY $0014 = #$00
 1F:C240:4C EA C2  JMP $C2EA
 1F:C243:C9 4B     CMP #$4B
 1F:C245:90 EE     BCC $C235
 1F:C247:D0 07     BNE $C250
 1F:C249:A9 01     LDA #$01
 1F:C24B:85 14     STA $0014 = #$00
 1F:C24D:4C EA C2  JMP $C2EA
 1F:C250:C9 52     CMP #$52
 1F:C252:90 E1     BCC $C235
 1F:C254:D0 0D     BNE $C263
--------------------------------------------
 Escape Character + #$52
 Sets the x-pos for newlines to <arg00>
 
 1F:C256:A2 0A     LDX #$0A
 1F:C258:20 5F C3  JSR $C35F                  / Increment $0A/$0B
 1F:C25B:B1 0A     LDA ($0A),Y
 1F:C25D:38        SEC
 1F:C25E:E9 20     SBC #$20
 1F:C260:8D 8A 72  STA $728A
--------------------------------------------
 1F:C263:C9 54     CMP #$54
 1F:C265:90 CE     BCC $C235
 1F:C267:D0 31     BNE $C29A
--------------------------------------------
 Escape Character + #$54
 1F:C269:AD 86 72  LDA $7286
 1F:C26C:85 52     STA $0052
 1F:C26E:AD 88 72  LDA $7288
 1F:C271:85 54     STA $0054
 1F:C273:AD 8C 72  LDA $728C
 1F:C276:38        SEC
 1F:C277:ED 86 72  SBC $7286
 1F:C27A:18        CLC
 1F:C27B:69 01     ADC #$01
 1F:C27D:85 56     STA $0056
 1F:C27F:A9 01     LDA #$01
 1F:C281:85 58     STA $0058
 1F:C283:84 5A     STY $005A
 1F:C285:84 5B     STY $005B
 1F:C287:84 5C     STY $005C
 1F:C289:84 5D     STY $005D
 
 1F:C28B:A9 08     LDA #$08
 1F:C28D:20 1D C4  JSR $C41D  / Sysop 08
 
 1F:C290:E6 54     INC $0054
 
 1F:C292:A9 08     LDA #$08
 1F:C294:20 1D C4  JSR $C41D  / Sysop 08
 
 1F:C297:4C EA C2  JMP $C2EA
--------------------------------------------
 1F:C29A:C9 57     CMP #$57
 1F:C29C:90 97     BCC $C235
 1F:C29E:D0 14     BNE $C2B4
--------------------------------------------
 Escape Character + #$57
 Waits one time unit for input before automatically advancing
   
 1F:C2A0:20 2A C3  JSR $C32A
 1F:C2A3:98        TYA
 1F:C2A4:48        PHA
 1F:C2A5:A9 01     LDA #$01
 1F:C2A7:48        PHA
 1F:C2A8:20 38 E3  JSR $E338 -> $CE9B (02)
 1F:C2AE 20 44 C3  JSR $C344
 1F:C2B1:4C EA C2  JMP $C2EA
-------------------------------------------
 1F:C2B4:C9 E0     CMP #$E0
 1F:C2B6:90 32     BCC $C2EA
 1F:C2B8:91 08     STA ($08),Y @ $0001 = #$EE
 1F:C2BA:20 66 C3  JSR $C366
 1F:C2BD:A5 13     LDA $0013 = #$40
 1F:C2BF:91 10     STA ($10),Y @ $0001 = #$EE
 1F:C2C1:20 74 C3  JSR $C374
 1F:C2C4:A9 00     LDA #$00
 1F:C2C6:91 1A     STA ($1A),Y @ $04FC = #$39
 1F:C2C8:91 0E     STA ($0E),Y @ $4785 = #$FF
 1F:C2CA:20 6D C3  JSR $C36D
 1F:C2CD:20 7B C3  JSR $C37B
 1F:C2D0:EE 86 72  INC $7286 = #$17
 1F:C2D3:E6 16     INC $0016 = #$06
 1F:C2D5:4C EA C2  JMP $C2EA
 1F:C2D8:A5 17     LDA $0017 = #$00
 1F:C2DA:D0 16     BNE $C2F2
 1F:C2DC:AD 8C 72  LDA $728C = #$1D
 1F:C2DF:CD 86 72  CMP $7286 = #$17
 1F:C2E2:90 0E     BCC $C2F2
 1F:C2E4:A5 16     LDA $0016 = #$06
 1F:C2E6:C9 21     CMP #$21
 1F:C2E8:B0 08     BCS $C2F2
 1F:C2EA:A2 0A     LDX #$0A
 1F:C2EC:20 5F C3  JSR $C35F
 1F:C2EF:4C 3E C0  JMP $C03E
 1F:C2F2:A5 16     LDA $0016 = #$06
 1F:C2F4:F0 06     BEQ $C2FC
 1F:C2F6:20 82 C3  JSR $C382
 1F:C2F9:20 44 C4  JSR $C444
 1F:C2FC:AD 8A 72  LDA $728A = #$08
 1F:C2FF:85 15     STA $0015 = #$11
 1F:C301:C9 40     CMP #$40
 1F:C303:90 02     BCC $C307
 1F:C305:A9 3F     LDA #$3F
 1F:C307:8D 86 72  STA $7286 = #$17
 1F:C30A:EE 88 72  INC $7288 = #$15
 1F:C30D:A5 0C     LDA $000C = #$21
 1F:C30F:F0 03     BEQ $C314
 1F:C311:EE 88 72  INC $7288 = #$15
 1F:C314:AD 88 72  LDA $7288 = #$15
 1F:C317:C9 1E     CMP #$1E
 1F:C319:90 05     BCC $C320
 1F:C31B:A9 1D     LDA #$1D
 1F:C31D:8D 88 72  STA $7288 = #$15
 1F:C320:84 17     STY $0017 = #$00
 1F:C322:4C EA C2  JMP $C2EA
 
Null character has been reached
 1F:C325:A5 16     LDA $0016 = #$06
 1F:C327:D0 59     BNE $C382
 1F:C329:60        RTS ----------------------------------------- 
----------------------------------------------------------------
Function $C32A
Stores data in preparation for running VM function?

 1F:C32A:68        PLA
 1F:C32B:85 40     STA $0040
 1F:C32D:68        PLA
 1F:C32E:85 41     STA $0041               
 1F:C330:A0 00     LDY #$00
 
 1F:C332:B9 08 00  LDA $0008,Y
 1F:C335:48        PHA
 1F:C336:C8        INY
 1F:C337:C0 14     CPY #$14
 1F:C339:D0 F7     BNE $C332
 
 1F:C33B:A5 41     LDA $0041 = #$00
 1F:C33D:48        PHA
 1F:C33E:A5 40     LDA $0040 = #$01
 1F:C340:48        PHA
 1F:C341:A0 00     LDY #$00
 1F:C343:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $C344

 1F:C344:68        PLA
 1F:C345:85 40     STA $0040 = #$06
 1F:C347:68        PLA
 1F:C348:85 41     STA $0041 = #$00
 1F:C34A:A0 13     LDY #$13
 1F:C34C:68        PLA
 1F:C34D:99 08 00  STA $0008,Y @ $0009 = #$00
 1F:C350:C0 00     CPY #$00
 1F:C352:F0 04     BEQ $C358
 1F:C354:88        DEY
 1F:C355:4C 4C C3  JMP $C34C
 1F:C358:A5 41     LDA $0041 = #$00
 1F:C35A:48        PHA
 1F:C35B:A5 40     LDA $0040 = #$06
 1F:C35D:48        PHA
 1F:C35E:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $C35F
 1F:C35F:F6 00     INC $00,X @ $0001 = #$EE
 1F:C361:D0 02     BNE $C365
 1F:C363:F6 01     INC $01,X @ $0002 = #$26
 1F:C365:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $C41D

Performs sysop (A)
----------------------------------------------------------------
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C470                                  20 BF E4 00 00 
C480 60 8D 10 E9 D4 EE 04 D7 80 C4 61 8D 10 E9 D4 EE 
C490 04 D7 80 C4 60 8D 10 E9 D4 EE 04 D7 A8 C4 61 8D 
C4A0 10 E9 D4 EE 04 D8 94 C4 CF 

Function $C47B (00 00)

C480 60
C481 8D 10
C483 E9 D4 EE 04 /
C487 D7 80 C4    /

C48A 61
C48B 8D 10
C48D E9 D4 EE 04 
C491 D7 80 C4    / Wait until no input on PAD1 or PAD2

C494 60
C495 8D 10
C497 E9 D4 EE 04 
C49B D7 A8 C4

C49E 61
C49F 8D 10
C4A1 E9 D4 EE 04
C4A5 D8 94 C4    / Wait until input on PAD1 or PAD2

C4A8 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C4A0                            20 BF E4 FC FF AC AD 
C4B0 CE 2A 0A D0 2A 3A E9 C0 CF 02 0C D8 C6 C4 0C D1 
C4C0 52 B9 B3 D6 D3 C4 60 8D 10 E9 D4 EE 04 2B 0B D7 
C4D0 DA C4 61 8D 10 E9 D4 EE 04 2B 0B CF 

Function $C4A9 (FC FF)

C4AE AC AD CE    / Call $CEAD -> Advance RNG
C4B1 2A          /

C4B2 0A          / rng = getSeed();
C4B3 D0
C4B4 2A          / rng++;
C4B5 3A
C4B6 E9 C0 CF 02 / Call $CFC0
                 / updateSeed(rng);
C4BA 0C
C4BB D8 C6 C4    

if arg!=0
 C4BE 0C
 C4BF D1
 C4C0 52
 C4C1 B9 
 C4C2 B3
 C4C3 D6 D3 C4
 
else
 C4C6 60
 C4C7 8D 10
 C4C9 E9 D4 EE 04
 C4CD 2B

 C4CE 0B
 C4CF D7 DA C4    ; if () return z;
 C4D2 61          ; push 1

C4D3 8D 10
C4D5 E9 D4 EE 04
C4D9 2B

C4DA 0B
C4DB CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C4D0                                     20 BF E4 FC 
C4E0 FF 40 2B D6 F1 C4 0B 5A B5 1A BB 2B 0C B3 B0 D0 
C4F0 B1 0C B0 D3 8F D0 2A 5A C6 D7 E6 C4 0B CF 

Function $C4DC (FC FF)
<arg00> = pointer to char

C4E1 40       / loadl  #$00
C4E2 2B       / storel <var00>
C4E3 D6 F1 C4 / jump   $C4F1

Loop:
C4E6 0B       / loadl  <var00>
C4E7 5A       / loadr  #$0A
C4E8 B5       / mul
C4E9 1A       / loadr  <var02>
C4EA BB       / add
C4EB 2B       / storel <var00>
C4EC 0C       / loadl  <arg00>
C4ED B3       / pushl                               / (+2)
C4EE B0       / drefl  (int16)
C4EF D0       / decl
C4F0 B1       / popst                               / (-2)

C4F1 0C       / loadl  <arg00>
C4F2 B0       / drefl  (int16)
C4F3 D3       / drefl  (int8)
C4F4 8F D0    / add    #$80
C4F6 2A       / storel <var02>
C4F7 5A       / loadr  #$0A
C4F8 C6       / cmp    l < r
C4F9 D7 E6 C4 / jumpnz $C4E6

C4FC 0B       / loadl <var00>
C4FD CF       / ret
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C4F0                                           20 BF 
C500 E4 FE FF B7 0C 0D 00 B7 19 0A 00 00 00 B7 08 D8 
C510 2A C5 0C B3 B0 D0 B1 D1 B3 B7 0C 0D 00 B7 19 30 
C520 00 00 00 B7 03 B7 27 D4 41 CF B7 0C 0D 00 B7 19 
C530 0A 00 00 00 B7 02 B7 14 3C E9 FE C4 06 2B B7 0C 
C540 0D 00 B7 19 0A 00 00 00 B7 1E B7 14 3C E9 FE C4 
C550 06 0B D0 CF 

Function $C4FE (FE FF)

C503 B7 0C 0D 00
C506 B7 19
     0A 00 00 00
C50D B7 08
C50F D7 2A C5

C512 0C
C513 B3
C514 B0
C515 D0
C516 B1

C52A

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C500 E4 FE FF B7 0C 0D 00 B7 19 0A 00 00 00 B7 08 D8 
C510 2A C5 0C B3 B0 D0 B1 D1 B3 B7 0C 0D 00 B7 19 30 
C520 00 00 00 B7 03 B7 27 D4 41 CF B7 0C 0D 00 B7 19 
C530 0A 00 00 00 B7 02 B7 14 3C E9 FE C4 06 2B B7 0C 
C540 0D 00 B7 19 0A 00 00 00 B7 1E B7 14 3C E9 FE C4 
C550 06 0B D0 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C550             20 BF E4 4D FF DE 4D FF 85 E3 0C 85 
C560 FD D6 6F C5 81 E3 D0 85 E3 D1 B3 A0 FF FF D4 81 
C570 FD D0 85 FD D1 D3 A2 FF FF D8 FD C6 A0 FF FF 8B 
C580 25 C0 D8 64 C5 DE F3 FF 85 F1 46 85 E7 40 85 EB 
C590 85 EF 85 ED 81 FD D3 A2 FF FF A0 FF FF 8B 2D C0 
C5A0 D8 AF C5 41 85 EB 81 FD D0 85 FD D3 A2 FF FF A0 
C5B0 FF FF B3 89 30 B4 C3 D8 CE C5 A0 FF FF 8B 39 C3 
C5C0 D8 CE C5 DE FD FF B3 E9 DC C4 02 D6 CF C5 40 85 
C5D0 E9 81 FD D0 85 FD D1 D3 A2 FF FF 8B 2E C0 D8 F8 
C5E0 C5 DE FD FF B3 E9 DC C4 02 85 E7 41 85 EF 81 FD 
C5F0 D0 85 FD D1 D3 A2 FF FF A0 FF FF B3 E9 0C DC 02
C600 8B 4C C0 D8 13 C6 41 85 ED 81 FD D0 85 FD D1 D3 
C610 A2 FF FF A0 FF FF B3 E9 0C DC 02 D9 05 00 00 00 
C620 FC C6 43 00 75 C6 44 00 34 C6 53 00 5E C6 55 00 
C630 34 C6 64 C5 81 ED D8 53 C6 0D 72 2D 8F FE B7 16 
C640 B7 14 DE F1 FF B3 E9 FE C4 06 CD 81 E9 BC 85 E9 
C650 D6 88 C6 0D 72 2D 8F FE B0 B7 26 D6 40 C6 0D 72 
C660 2D 8F FE B0 85 F1 87 F1 E9 F3 DE 02 CD 81 E9 BC 
C670 85 E9 D6 94 C6 81 E9 D1 85 E9 81 F1 D0 85 F1 D1 
C680 B3 0D 72 2D 8F FE B0 D4 87 F1 40 D4 DE F3 FF 85 
C690 F1 40 85 EF 81 E9 85 E5 D6 AA C6 81 EB D7 D9 C6 
C6A0 81 E3 D0 85 E3 D1 B3 89 20 D4 81 E9 D1 85 E9 D0 
C6B0 50 C4 D7 9B C6 D6 D9 C6 81 EF D8 C4 C6 81 E7 50 
C6C0 C4 D8 D4 C6 81 E3 D0 85 E3 D1 B3 81 F1 D3 D4 81 
C6D0 E7 D1 85 E7 81 F1 D0 85 F1 81 F1 D3 D7 B8 C6 81 
C6E0 E5 D1 85 E5 D0 50 C4 D8 6F C5 81 EB D8 6F C5 81 
C6F0 E3 D0 85 E3 D1 B3 89 20 D4 D6 DF C6 CF 87 E3 40
C700 D4 3E DE 4D FF B3 E9 03 C0 04 CF 

Function $C554 (4D FF)

some_print_function(char* string);

C559 DE 4D FF    / char var4d[150];
C55C 85 E3       / char*var_e3 = &var_4d;             / Pointer to local char array

C55E 0C
C55F 85 FD       / char*var_fd = string;

C561 D6 6F C5    / char var_ff;

LOOP:
C564 81 E3       / 
C566 D0
C567 85 E3       / var_e3++
C569 D1          /
C56A B3          /
C56B A0 FF FF    /
C56E D4          / (var_e3 - 1) = var_ff

C56F 81 FD
C571 D0
C572 85 FD       ; var_fd++
C574 D1
C575 D3          ; 
C576 A2 FF FF    ; var_ff = *(var_fd - 1)
C579 D8 FD C6

C57C A0 FF FF
C57F 8B 25
C581 C0          
C582 D8 64 C5    ; Copy string to array until '%' is spotted
-------------
C585 DE F3 FF    ;
C588 85 F1       ;

C58A 46          ;
C58B 85 E7       ;

C58D 40          ;
C58E 85 EB       ;
C590 85 EF       ;
C592 85 ED       ;

C594 81 FD       ;
C596 D3          ;
C597 A2 FF FF    ;

C59A A0 FF FF    ;
C59D 8B 2D       ;
C59F C0          ; if next char is '-'
C5A0 D9 AF C5

	C5A3 41
	C5A4 85 EB
	
	C5A6 81 FD
	C5A8 D0
	C5A9 85 FD
	C5AB D3
	C5AC A2 FF FF

	
C5AF A0 FF FF
C5B2 B3
C5B3 89 30     
C5B5 B4
C5B6 C3
C5B7 D8 CE C5

C5BA A0 FF FF
C5BD 8B 39
C5BF C3
C5C0 D8 CE C5 ; 

if next char is '0'-'9'	
	C5C3 DE FD FF
	C5C6 B3
	C5C7 E9 DC C4 02 / Call $C4DC
	C5CB D6 CF C5
else
	C5CE 40
C5CF	

C6FD

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C5C0 D8 CE C5 DE FD FF B3 E9 DC C4 02 D6 CF C5 40 85 
C5D0 E9 81 FD D0 85 FD D1 D3 A2 FF FF 8B 2E C0 D8 F8 
C5E0 C5 DE FD FF B3 E9 DC C4 02 85 E7 41 85 EF 81 FD 
C5F0 D0 85 FD D1 D3 A2 FF FF A0 FF FF B3 E9 0C DC 02
C600 8B 4C C0 D8 13 C6 41 85 ED 81 FD D0 85 FD D1 D3 
C610 A2 FF FF A0 FF FF B3 E9 0C DC 02 D9 05 00 00 00 
C620 FC C6 43 00 75 C6 44 00 34 C6 53 00 5E C6 55 00 
C630 34 C6 64 C5 81 ED D8 53 C6 0D 72 2D 8F FE B7 16 
C640 B7 14 DE F1 FF B3 E9 FE C4 06 CD 81 E9 BC 85 E9 
C650 D6 88 C6 0D 72 2D 8F FE B0 B7 26 D6 40 C6 0D 72 
C660 2D 8F FE B0 85 F1 87 F1 E9 F3 DE 02 CD 81 E9 BC 
C670 85 E9 D6 94 C6 81 E9 D1 85 E9 81 F1 D0 85 F1 D1 
C680 B3 0D 72 2D 8F FE B0 D4 87 F1 40 D4 DE F3 FF 85 
C690 F1 40 85 EF 81 E9 85 E5 D6 AA C6 81 EB D7 D9 C6 
C6A0 81 E3 D0 85 E3 D1 B3 89 20 D4 81 E9 D1 85 E9 D0 
C6B0 50 C4 D7 9B C6 D6 D9 C6 81 EF D8 C4 C6 81 E7 50 
C6C0 C4 D8 D4 C6 81 E3 D0 85 E3 D1 B3 81 F1 D3 D4 81 
C6D0 E7 D1 85 E7 81 F1 D0 85 F1 81 F1 D3 D7 B8 C6 81 
C6E0 E5 D1 85 E5 D0 50 C4 D8 6F C5 81 EB D8 6F C5 81 
C6F0 E3 D0 85 E3 D1 B3 89 20 D4 D6 DF C6 CF 87 E3 40
C700 D4 3E DE 4D FF B3 E9 03 C0 04 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C700                                  20 BF E4 00 00
C710 0C A8 86 72 0D A8 88 72 CF 

Function $C70B (00 00)

C710 0C          / mov L      <arg00>
C711 A8 86 72    / mov <int16>$7286 L

C714 0D          / mov L      <arg02>
C715 A8 88 72    / mov <int16>$7288 L
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C710                            20 BF E4 FE FF DE 0D
C720 00 2B 60 3B 3C E9 54 C5 06 CF 

Function $C719 (FE FF)

C71E DE 0D 00    /
C721 2B          /
C722 60          / Push #$00                         / (+2)
C723 3B          / Push <var00>                      / (+2)
C724 3C          / Push <arg00>                      / (+2)
C725 E9 54 C5 06 / Call $C554                        / (-6)
C729 CF          / Exit
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C720                               20 BF E4 00 00 A4
C730 86 72 50 C2 D8 3B C7 40 D6 4C C7 A4 86 72 8B 3F 
C740 C4 D8 49 C7 89 3F D6 4C C7 A4 86 72 A8 86 72 A4 
C750 88 72 50 C2 D8 5B C7 40 D6 6C C7 A4 88 72 8B 1D 
C760 C4 D8 69 C7 89 1D D6 6C C7 A4 88 72 A8 88 72 CF

Function $C72A (00 00)

if (string_xpos < 0)
{
	string_xpos = 0;
}
else if (string_xpos > 0x3F)
	string_xpos = 0x3F;
{

if (string_ypos < 0)
{
	string_ypos = 0;
}
else if (string_ypos > 0x1D)
{
	string_ypos = 0x1D;
}
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
C770 20 BF E4 00 00 3D 3C E9 0B C7 04 AC 2A C7 CF 

Function $C770 -> Test pos <0C>,<0D>

C775 3D
C776 3C
C777 E9 0B C7 04 / Call $C70B (Test pos <0C>,<0D>)
C77B AC 2A C7    / Call $C72A (Make sure that x/y string coords are valid)
C77E CF

----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C770                                              20 
C780 BF E4 00 00 0C A8 86 72 AC 2A C7 CF 

Function $C77F (00 00)
Set x-coordinate of next string to <arg00>

C784 0C
C785 A8 86 72
C788 AC 2A C7    / Call $C72A / Make sure that x/y string coords are valid 
C78B CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C780                                     20 BF E4 00 
C790 00 0C A8 88 72 AC 2A C7 CF 

Function $C78C (00 00)
Set y-coordinate of next string to <arg00>

C791 0C
C792 A8 88 72
C795 AC 2A C7    / Call $C72A / Make sure that x/y string coords are valid
C798 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C790                            20 BF E4 FE FF DE 0D 
C7A0 00 2B 61 3B 3C E9 54 C5 06 CF 

Function $C799 (FE FF)

C79E DE 0D 00
C7A1 2B
C7A2 61
C7A3 3B
C7A4 3C
C7A5 E9 54 C5 06 / Call $C554
C7A9 CF          / Return
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C7A0                               20 BF E4 00 00 60 
C7B0 8D 10 E9 D4 EE 04 D8 BD C7 41 D6 C8 C7 61 8D 10 
C7C0 E9 D4 EE 04 D7 B9 C7 40 CF 

Function $C7AA (00 00) -> Check for input on either controller

C7AF 60
C7B0 8D 10
C7B2 E9 D4 EE 04 / Call $EED4 -> Sysop 0x10
C7B6 D8 BD C7

if
	C7B9 41
	C7BA D6 C8 C7
else
	C7BD 61
	C7BE 8D 10
	C7C0 E9 D4 EE 04 / Call $EED4 -> Sysop 0x10
	C7C4 D7 B9 C7

C7C7 40
	
C7C8 CF

----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C7C0                            20 BF E4 00 00 60 E9 
C7D0 A9 C4 02 CF 

Function $C7C9 (00 00)
Get PAD1 input

C7CE 60          /
C7CF E9 A9 C4 02 / Call $C4A9 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
C7D0             20 BF E4 00 00 D6 EE C7 AC AA C7 D8 
C7E0 E4 C7 41 CF 61 8D 11 E9 D4 EE 04 0C D1 2C 0C 50 
C7F0 C8 D7 DC C7 40 CF 20 BF E4 00 00 A4 90 72 D8 05



====================================================
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CD20                                           20 BF
CD30 E4 FC FF A5 7D 73 D2 8C 14 DF BB B0 1C BB A2 FC
CD40 FF 8A E0 00 A2 FD FF 40 A2 FE FF A4 86 72 53 BD
CD50 A2 FF FF 61 60 DE FC FF B3 6D E9 D4 EE 08 CF

FUNCTION $CD2E (FC FF) $CD33-$CD5E

CD33 A5 7D 73    / Store $737D to $0008 
CD36 D2          / Double M8
CD37 8C 14 DF    / Store #$DF14 to MC
CD3A BB          / Add MC to M8
CD3B B0          / Replace M8 with 2-byte value
CD3C 1C          / Store preloaded 01/02 to MC
CD3D BB          / Add MC to M8
CD3E A2 FC FF    / Store $0008 to meta 04
CD41 8A E0 00    / Store #$E0 to M8
CD44 A2 FD FF    / Store $0008 to meta 03
CD47 40          / Store #$00 to M8
CD48 A2 FE FF    / Store $0008 to meta 02
CD4B A4 86 72    / Store $7286/$7287 to M8
CD4E 53          /
CD4F BD          / Multiply M8 by 8
CD50 A2 FF FF    / Store $0008 to meta 01
CD53 61          / Push #$01 to metastack            / (+2)
CD54 60          / Push #$00 to metastack            / (+2)
CD55 DE FC FF    / Store address of meta 04 to M8
CD58 B3          / Push M8 to metastack              / (+2)
CD59 6D          / Push #$0D to metastack            / (+2)
CD5A E9 D4 EE 08 / Run function $EED4                / (-8)
CD5E CF          / Exit                             
====================================================
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CD50                                              20
CD60 BF E4 00 00 A4 88 72 53 BD 78 B3 E9 2E CD 02 A4
CD70 90 72 D8 79 CD A4 90 72 DD 8D 14 E9 D4 C7 02 61
CD80 60 6C E9 D4 EE 06 A4 90 72 D8 90 CD A4 90 72 DD
CD90 8D 14 E9 D4 C7 02 D8 64 CD 60 E9 A9 C4 02 CF

FUNCTION $CD5F (00 00) $CD64-$CD9E

CD64 A4 88 72    / Store $7288/$7289 to M8            
CD67 53         
CD68 BD          / Multiply M8 by 3
CD69 78          / Add #$08 to M8
CD6A B3          / Push M8 to metastack               / (+2)
CD6B E9 2E CD 02 / Run function $CD2E                 / (-2)
CD6F 

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CD50                                              20
CD60 BF E4 00 00 A4 88 72 53 BD 78 B3 E9 2E CD 02 A4
CD70 90 72 D8 79 CD A4 90 72 DD 8D 14 E9 D4 C7 02 61
CD80 60 6C E9 D4 EE 06 A4 90 72 D8 90 CD A4 90 72 DD
CD90 8D 14 E9 D4 C7 02 D8 64 CD 60 E9 A9 C4 02 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CD90                                              20
CDA0 BF E4 FE FF 61 8E 23 DF E9 03 C0 04 60 E9 A9 C4 
CDB0 02 D7 AC CD AC 5F CD 2B 0B 51 C0 D7 C5 CD 0B 8B 
CDC0 40 C0 D8 D7 CD 61 8E 2A DF E9 03 C0 04 60 E9 A9 
CDD0 C4 02 D7 CD CD 41 CF 0B 52 C0 D7 E5 CD 0B 8C 80 
CDE0 00 C0 D8 B4 CD 61 8E 2C DF E9 03 C0 04 60 E9 A9 
CDF0 C4 02 D7 ED CD 40 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CDF0                      20 BF E4 00 00 8D 20 60 8E 
CE00 66 F3 66 E9 D4 EE 08 8D 18 67 E9 0B C7 04 AA 00 
CE10 60 8E 2E DF E9 19 C7 04 61 64 E9 D4 EE 04 B3 8E 
CE20 3D DF E9 19 C7 04 62 64 E9 D4 EE 04 B3 8E 45 DF 
CE30 E9 19 C7 04 D6 34 CE 

Function $CDF7 (00 00)

CDFC 8D 20
CDFE 60
CDFF 8E 66 F3    / $F366
CE02 66
CE03 E9 D4 EE 08 / Call $EED4 -> Sysop 0x06

CE07 8D 18
CE09 67
CE0A E9 0B C7 04 / Call $C70B

CE0E AA 00 60
CE11 8E 2E DF    / 
CE14 E9 19 C7 04 / Call $C719 -> Print PC

CE18 61
CE19 64
CE1A E9 D4 EE 04 / Call $EED4 -> Sysop 0x04
CE1E B3
CE1F 8E 3D DF
CE22 E9 19 C7 04 / Call $C719 -> Print Bank

CE26 62
CE27 64
CE28 E9 D4 EE 04 / Call $EED4 -> Sysop 0x04
CE2C B3
CE2D 8E 45 DF
CE30 E9 19 C7 04 / Call $C719 -> Print Bank

CE34 D6 34 CE    / Hang game
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CE30                      20 BF E4 00 00 8D 40 60 6C 
CE40 E9 D4 EE 06 60 60 60 67 E9 D4 EE 08 CF 

Function $CE37 (00 00) -> Wipe sprites and black out nametable

CE3C 8D 40
CE3E 60
CE3F 6C
CE40 E9 D4 EE 06 / Call $EED4 -> Sysop 0x0C (Wipe sprites 0x00-0x3F)

CE44 60
CE45 60
CE46 60
CE47 67
CE48 E9 D4 EE 08 / Call $EED4 -> Sysop 0x07 (Black out nametable)

CE4C CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CE40                                        20 BF E4 
CE50 00 00 D6 66 CE 60 E9 A9 C4 02 1C C1 D7 6D CE 61 
CE60 8D 11 E9 D4 EE 04 0D D1 2D D0 D7 55 CE CF

Function $CE4D (00 00)
Args:
<0C>
<0D> # of frames to wait

CE52 D6 66 CE

Loop:
	CE55 60
	CE56 E9 A9 C4 02 / Call $C4A9 (Get PAD input)
	CE5A 1C
	CE5B C1
	CE5C D7 6D CE
	
	if
		CE5F 61
		CE60 8D 11
		CE62 E9 D4 EE 04 / Call $EED4 -> Sysop 0x11
		
Bounds check:
	CE66 0D
	CE67 D1
	CE68 2D
	CE69 D0
	CE6A D7 55 CE
	
CE6D CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CE60                                           20 BF
CE70 E4 00 00 D6 85 CE 60 E9 A9 C4 02 D7 8C CE 61 8D
CE80 11 E9 D4 EE 04 0C D1 2C D0 D7 76 CE CF

FUNCTION $CE6E (00 00)
Wait <arg00> frames for input before automatically advancing.

CE73 D6 85 CE    / Jump $CE85
------------------
Loop body:
CE76 60          / Push #$00                         / (+2)
CE77 E9 A9 C4 02 / Call $C4A9                        / (-2) Get PAD1 input 
CE7B D7 8C CE    / Jump to $CE8C if not zero         /      Exit if any input
CE7E 61          / Push #$01                         / (+2)
CE7F 8D 11       / Push #$11                         / (+2)
CE81 E9 D4 EE 04 / Call $EED4                        / (-4) Sysop 0x11: Wait 1 frame
 
Increment counter:
CE85 0C          / Load L <arg00>
CE86 D1          / L--
CE87 2C          / Load <arg00> L

Bound check:
CE88 D0          / L++
CE89 D7 76 CE    / Jump to $CE76 if not zero
------------------

CE8C CF          / Return

----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CE80                                        20 BF E4
CE90 00 00 0C 56 B5 B3 E9 6E CE 02 CF

Function $CE8D (00 00)
Wait <arg00> time units for PAD1 input before automatically advancing.

CE92 0C
CE93 56
CE94 B5
CE95 B3
CE96 E9 6E CE 02
CE9A CF

----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
CE90                                  20 BF E4 00 00 
CEA0 A5 88 6B 1C B5 53 B5 B3 E9 8D CE 02 CF

Function $CE9B (00 00)

Wait (<arg00>*message speed) time units for PAD1 input before automatically advancing.

CEA0 A5 88 6B    / loadl <int8> $6B88                / Message speed
CEA3 1C          / loadr <arg00>                     /
CEA4 B5          / mul l r                           
CEA5 53          / loadr #$03
CEA6 B5          / mul l r
CEA7 B3          / push l                            / (+2)
CEA8 E9 8D CE 02 / call $CE8D                    
CEAC CF          / return
----------------------------------------------------
Function $CEAD -> Advance RNG

 1F:CEAD:A9 72     LDA #$72
 1F:CEAF:85 0B     STA $000B = #$00
 1F:CEB1:A9 94     LDA #$94
 1F:CEB3:85 0A     STA $000A = #$00
 1F:CEB5:A0 04     LDY #$04
 1F:CEB7:88        DEY
 1F:CEB8:B1 0A     LDA ($0A),Y @ $0001 = #$05
 1F:CEBA:99 10 00  STA $0010,Y @ $0011 = #$00
 1F:CEBD:99 0C 00  STA $000C,Y @ $000D = #$65
 1F:CEC0:98        TYA
 1F:CEC1:D0 F4     BNE $CEB7
 1F:CEC3:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CEC6:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CEC9:A2 00     LDX #$00
 1F:CECB:20 89 CF  JSR $CF89
 1F:CECE:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CED1:A2 00     LDX #$00
 1F:CED3:20 89 CF  JSR $CF89
 1F:CED6:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CED9:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CEDC:A2 00     LDX #$00
 1F:CEDE:20 89 CF  JSR $CF89 
 1F:CEE1:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CEE4:A2 00     LDX #$00
 1F:CEE6:20 89 CF  JSR $CF89
 1F:CEE9:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CEEC:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CEEF:20 9E CF  JSR $CF9E Left shift 32-bit val at $10
 1F:CEF2:A2 01     LDX #$01
 1F:CEF4:20 89 CF  JSR $CF89
 1F:CEF7:20 A9 CF  JSR $CFA9
 1F:CEFA:A2 01     LDX #$01
 1F:CEFC:20 89 CF  JSR $CF89
 1F:CEFF:20 A9 CF  JSR $CFA9
 1F:CF02:A2 01     LDX #$01
 1F:CF04:20 89 CF  JSR $CF89
 1F:CF07:20 A9 CF  JSR $CFA9
 1F:CF0A:20 A9 CF  JSR $CFA9
 1F:CF0D:20 A9 CF  JSR $CFA9
 1F:CF10:A2 01     LDX #$01
 1F:CF12:20 89 CF  JSR $CF89
 1F:CF15:20 A9 CF  JSR $CFA9
 1F:CF18:20 A9 CF  JSR $CFA9
 1F:CF1B:20 A9 CF  JSR $CFA9
 1F:CF1E:A2 02     LDX #$02
 1F:CF20:20 89 CF  JSR $CF89
 1F:CF23:20 B4 CF  JSR $CFB4
 1F:CF26:A2 02     LDX #$02
 1F:CF28:20 89 CF  JSR $CF89
 1F:CF2B:20 B4 CF  JSR $CFB4
 1F:CF2E:20 B4 CF  JSR $CFB4
 1F:CF31:20 B4 CF  JSR $CFB4
 1F:CF34:20 B4 CF  JSR $CFB4
 1F:CF37:A2 02     LDX #$02
 1F:CF39:20 89 CF  JSR $CF89
 1F:CF3C:20 B4 CF  JSR $CFB4
 1F:CF3F:A2 02     LDX #$02
 1F:CF41:20 89 CF  JSR $CF89
 1F:CF44:20 B4 CF  JSR $CFB4
 1F:CF47:A2 03     LDX #$03
 1F:CF49:20 89 CF  JSR $CF89
 1F:CF4C:06 13     ASL $0013 = #$80
 1F:CF4E:06 13     ASL $0013 = #$80
 1F:CF50:06 13     ASL $0013 = #$80
 1F:CF52:06 13     ASL $0013 = #$80
 1F:CF54:06 13     ASL $0013 = #$80
 1F:CF56:06 13     ASL $0013 = #$80
 1F:CF58:A2 03     LDX #$03
 1F:CF5A:20 89 CF  JSR $CF89
 1F:CF5D:A2 0C     LDX #$0C
 1F:CF5F:A9 39     LDA #$39
 1F:CF61:20 46 E1  JSR $E146
 1F:CF64:A2 0D     LDX #$0D
 1F:CF66:A9 30     LDA #$30
 1F:CF68:20 46 E1  JSR $E146
 1F:CF6B:A0 04     LDY #$04
 1F:CF6D:88        DEY
 1F:CF6E:B9 0C 00  LDA $000C,Y @ $000D = #$65
 1F:CF71:91 0A     STA ($0A),Y @ $0001 = #$05
 1F:CF73:98        TYA
 1F:CF74:D0 F7     BNE $CF6D
 1F:CF76:A5 0E     LDA $000E = #$C8
 1F:CF78:29 FF     AND #$FF
 1F:CF7A:85 08     STA $0008 = #$01
 1F:CF7C:A5 0F     LDA $000F = #$FF
 1F:CF7E:29 7F     AND #$7F
 1F:CF80:85 09     STA $0009 = #$00
 1F:CF82:60        RTS -----------------------------------------
----------------------------------------------------
Function $CF83

 1F:CF83:8A        TXA
 1F:CF84:C9 04     CMP #$04
 1F:CF86:D0 01     BNE $CF89
 1F:CF88:60        RTS -----------------------------------------
 1F:CF89:B5 0C     LDA $0C,X @ $0035 = #$00
 1F:CF8B:18        CLC
 1F:CF8C:75 10     ADC $10,X @ $0039 = #$00
 1F:CF8E:95 0C     STA $0C,X @ $0035 = #$00
 1F:CF90:E8        INX
 1F:CF91:90 F0     BCC $CF83
 1F:CF93:8A        TXA
 1F:CF94:C9 04     CMP #$04
 1F:CF96:F0 05     BEQ $CF9D
 1F:CF98:F6 0C     INC $0C,X @ $0035 = #$00
 1F:CF9A:4C 89 CF  JMP $CF89
 1F:CF9D:60        RTS -----------------------------------------
----------------------------------------------------
Function $CF9E -> Left shift 32-bit val at $10

 1F:CF9E:06 10     ASL $0010
 1F:CFA0:90 07     BCC $CFA9
 1F:CFA2:06 11     ASL $0011
 1F:CFA4:E6 11     INC $0011
 1F:CFA6:4C AB CF  JMP $CFAB
 1F:CFA9:06 11     ASL $0011
 1F:CFAB:90 07     BCC $CFB4
 1F:CFAD:06 12     ASL $0012
 1F:CFAF:E6 12     INC $0012
 1F:CFB1:4C B6 CF  JMP $CFB6
 1F:CFB4:06 12     ASL $0012
 1F:CFB6:90 05     BCC $CFBD
 1F:CFB8:06 13     ASL $0013
 1F:CFBA:E6 13     INC $0013
 1F:CFBC:60        RTS -----------------------------------------
 1F:CFBD:06 13     ASL $0013
 1F:CFBF:60        RTS -----------------------------------------
----------------------------------------------------
Function $CFC0

 1F:CFC0:A9 72     LDA #$72
 1F:CFC2:85 0B     STA $000B = #$00
 1F:CFC4:A9 94     LDA #$94
 1F:CFC6:85 0A     STA $000A = #$00
 1F:CFC8:A0 02     LDY #$02
 1F:CFCA:A9 00     LDA #$00
 1F:CFCC:91 0A     STA ($0A),Y @ $0001 = #$05
 1F:CFCE:B1 02     LDA ($02),Y @ $0509 = #$00
 1F:CFD0:A0 00     LDY #$00
 1F:CFD2:91 0A     STA ($0A),Y @ $0001 = #$05
 1F:CFD4:A0 03     LDY #$03
 1F:CFD6:A9 00     LDA #$00
 1F:CFD8:91 0A     STA ($0A),Y @ $0001 = #$05
 1F:CFDA:B1 02     LDA ($02),Y @ $0509 = #$00
 1F:CFDC:A0 01     LDY #$01
 1F:CFDE:91 0A     STA ($0A),Y @ $0001 = #$05
 1F:CFE0:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $CFE1

 1F:CFE1:A0 02     LDY #$02
 1F:CFE3:B1 02     LDA ($02),Y
 1F:CFE5:85 14     STA $0014
 1F:CFE7:C8        INY
 1F:CFE8:B1 02     LDA ($02),Y
 1F:CFEA:85 15     STA $0015
 1F:CFEC:D0 09     BNE $CFF7
 1F:CFEE:A5 14     LDA $0014
 1F:CFF0:D0 05     BNE $CFF7
 1F:CFF2:85 08     STA $0008 ; Return 0
 1F:CFF4:85 09     STA $0009
 1F:CFF6:60        RTS -----------------------------------------
 1F:CFF7:20 AD CE  JSR $CEAD / Advance RNG
 1F:CFFA:A2 14     LDX #$14
 1F:CFFC:A0 08     LDY #$08
 1F:CFFE:A9 08     LDA #$08
 1F:D000:4C EB E1  JMP $E1EB
----------------------------------------------------------------
Function $D003

 1F:D003:A0 05     LDY #$05
 1F:D005:20 00 E1  JSR $E100 / Transfer stack data
 
 1F:D008:A5 0C     LDA $000C
 1F:D00A:38        SEC
 1F:D00B:E5 0A     SBC $000A
 1F:D00D:B0 04     BCS $D013
 
 if
 {
	 1F:D00F:49 FF     EOR #$FF
	 1F:D011:69 01     ADC #$01
 }
 
 1F:D013:C9 05     CMP #$05
 1F:D015:90 0A     BCC $D021
 
 if
 {
	 1F:D017:38        SEC
	 1F:D018:E9 04     SBC #$04
	 1F:D01A:85 40     STA $0040
	 1F:D01C:A9 04     LDA #$04
	 1F:D01E:38        SEC
	 1F:D01F:E5 40     SBC $0040
 }
 
 1F:D021:85 08     STA $0008
 1F:D023:84 09     STY $0009
 1F:D025:60        RTS -----------------------------------------
----------------------------------------------------
Function $D026 ->
Args:
+0A Array type
0 = player ship IDs
<0D> Ptr for array to be written to

 1F:D026:A0 05     LDY #$05
 1F:D028:20 00 E1  JSR $E100 ; Transfer stack data to $08 onward

 
 1F:D02B:A5 0A     LDA $000A
 1F:D02D:0A        ASL
 1F:D02E:0A        ASL
 1F:D02F:18        CLC
 1F:D030:65 0A     ADC $000A
 1F:D032:85 0A     STA $000A   / $A *= 5
 
 1F:D034:A9 6C     LDA #$6C
 1F:D036:85 0F     STA $000F 
 1F:D038:A9 90     LDA #$90
 1F:D03A:85 0E     STA $000E   / $E = #$6C90 (pointer)
 
 1F:D03C:A0 07     LDY #$07
 Loop:
 1F:D03E:A5 0A     LDA $000A
 1F:D040:A2 0E     LDX #$0E
 1F:D042:20 46 E1  JSR $E146   / $E += 7*$A 
 1F:D045:88        DEY
 1F:D046:D0 F6     BNE $D03E
 
 1F:D048:A5 0E     LDA $000E
 1F:D04A:85 10     STA $0010
 1F:D04C:A5 0F     LDA $000F
 1F:D04E:85 11     STA $0011
 1F:D050:A9 23     LDA #$23
 1F:D052:A2 10     LDX #$10
 1F:D054:20 46 E1  JSR $E146   / $10 += 0x23
 1F:D057:84 15     STY $0015
 1F:D059:A0 06     LDY #$06
 1F:D05B:B1 0E     LDA ($0E),Y
 1F:D05D:29 40     AND #$40
 1F:D05F:F0 0D     BEQ $D06E
 1F:D061:A0 00     LDY #$00
 1F:D063:A5 0A     LDA $000A
 1F:D065:91 0C     STA ($0C),Y @
 1F:D067:A2 0C     LDX #$0C
 1F:D069:20 A9 D1  JSR $D1A9 -> Increment $0C/$0D
 1F:D06C:E6 15     INC $0015
 1F:D06E:E6 0A     INC $000A
 1F:D070:A9 07     LDA #$07
 1F:D072:A2 0E     LDX #$0E
 1F:D074:20 46 E1  JSR $E146
 1F:D077:A5 0F     LDA $000F
 1F:D079:C5 11     CMP $0011
 1F:D07B:D0 DC     BNE $D059
 1F:D07D:A5 0E     LDA $000E
 1F:D07F:C5 10     CMP $0010
 1F:D081:90 D6     BCC $D059
 
 1F:D083:A5 15     LDA $0015
 1F:D085:85 08     STA $0008
 1F:D087:A9 00     LDA #$00
 1F:D089:85 09     STA $0009
 1F:D08B:60        RTS -----------------------------------------
----------------------------------------------------
Function $D08C
 1F:D08C:A0 07     LDY #$07
 1F:D08E:20 00 E1  JSR $E100 ; Save stack data
 
 1F:D091:A9 01     LDA #$01
 1F:D093:85 52     STA $0052
 1F:D095:84 53     STY $0053
 1F:D097:A9 04     LDA #$04
 1F:D099:20 84 D3  JSR $D384 -> Run Sysop 0x04 (Get Page of RAM Bank 01)
 1F:D09C:A5 66     LDA $0066
 1F:D09E:85 10     STA $0010
 1F:D0A0:A5 67     LDA $0067
 1F:D0A2:85 11     STA $0011
 
 1F:D0A4:A0 03     LDY #$03
 1F:D0A6:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D0A8:20 DA D3  JSR $D3DA
 1F:D0AB:85 13     STA $0013 = #$00
 1F:D0AD:A0 02     LDY #$02
 1F:D0AF:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D0B1:A0 05     LDY #$05
 1F:D0B3:20 D5 D3  JSR $D3D5
 1F:D0B6:18        CLC
 1F:D0B7:65 13     ADC $0013 = #$00
 1F:D0B9:85 13     STA $0013 = #$00
 1F:D0BB:A0 02     LDY #$02
 1F:D0BD:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D0BF:A0 03     LDY #$03
 1F:D0C1:20 DA D3  JSR $D3DA
 1F:D0C4:85 12     STA $0012 = #$00
 1F:D0C6:A0 01     LDY #$01
 1F:D0C8:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D0CA:A0 05     LDY #$05
 1F:D0CC:20 D5 D3  JSR $D3D5
 1F:D0CF:18        CLC
 1F:D0D0:65 12     ADC $0012 = #$00
 1F:D0D2:85 12     STA $0012 = #$00
 1F:D0D4:A0 03     LDY #$03
 1F:D0D6:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D0D8:0A        ASL
 1F:D0D9:90 05     BCC $D0E0
 1F:D0DB:A2 12     LDX #$12
 1F:D0DD:20 A9 D1  JSR $D1A9 -> Increment $12/$13
 1F:D0E0:A5 12     LDA $0012 = #$00
 1F:D0E2:A0 05     LDY #$05
 1F:D0E4:20 DA D3  JSR $D3DA
 1F:D0E7:85 19     STA $0019 = #$00
 1F:D0E9:84 18     STY $0018 = #$00
 1F:D0EB:A0 01     LDY #$01
 1F:D0ED:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D0EF:18        CLC
 1F:D0F0:69 80     ADC #$80
 1F:D0F2:85 15     STA $0015 = #$08
 1F:D0F4:88        DEY
 1F:D0F5:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D0F7:38        SEC
 1F:D0F8:E5 18     SBC $0018 = #$00
 1F:D0FA:85 14     STA $0014 = #$00
 1F:D0FC:B0 02     BCS $D100
 1F:D0FE:C6 15     DEC $0015 = #$08
 1F:D100:A5 15     LDA $0015 = #$08
 1F:D102:38        SEC
 1F:D103:E5 19     SBC $0019 = #$00
 1F:D105:85 15     STA $0015 = #$08
 1F:D107:A2 12     LDX #$12
 1F:D109:A9 F0     LDA #$F0
 1F:D10B:20 46 E1  JSR $E146
 1F:D10E:A0 04     LDY #$04
 1F:D110:88        DEY
 1F:D111:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D113:99 18 00  STA $0018,Y @ $0019 = #$00
 1F:D116:98        TYA
 1F:D117:D0 F7     BNE $D110
 1F:D119:A5 18     LDA $0018 = #$00
 1F:D11B:18        CLC
 1F:D11C:65 0E     ADC $000E = #$77
 1F:D11E:85 18     STA $0018 = #$00
 1F:D120:90 19     BCC $D13B
 1F:D122:A5 19     LDA $0019 = #$00
 1F:D124:18        CLC
 1F:D125:69 01     ADC #$01
 1F:D127:85 19     STA $0019 = #$00
 1F:D129:90 10     BCC $D13B
 1F:D12B:A5 1A     LDA $001A = #$2D
 1F:D12D:18        CLC
 1F:D12E:69 01     ADC #$01
 1F:D130:85 1A     STA $001A = #$2D
 1F:D132:90 07     BCC $D13B
 1F:D134:A5 1B     LDA $001B = #$05
 1F:D136:18        CLC
 1F:D137:69 01     ADC #$01
 1F:D139:85 1B     STA $001B = #$05
 1F:D13B:A0 04     LDY #$04
 1F:D13D:88        DEY
 1F:D13E:B9 18 00  LDA $0018,Y @ $0019 = #$00
 1F:D141:91 0A     STA ($0A),Y @ $7295 = #$46
 1F:D143:98        TYA
 1F:D144:D0 F7     BNE $D13D
 1F:D146:A5 12     LDA $0012 = #$00
 1F:D148:85 54     STA $0054 = #$78
 1F:D14A:A5 13     LDA $0013 = #$00
 1F:D14C:85 55     STA $0055 = #$46
 1F:D14E:A9 01     LDA #$01
 1F:D150:85 52     STA $0052 = #$01
 1F:D152:84 53     STY $0053 = #$00
 1F:D154:A9 03     LDA #$03
 1F:D156:20 84 D3  JSR $D384 -> Run Sysop 0x03 (Restore RAM bank 01)
 1F:D159:A5 0E     LDA $000E = #$77
 1F:D15B:D0 13     BNE $D170
 1F:D15D:A5 10     LDA $0010 = #$00
 1F:D15F:85 54     STA $0054 = #$78
 1F:D161:A5 11     LDA $0011 = #$00
 1F:D163:85 55     STA $0055 = #$46
 1F:D165:A9 01     LDA #$01
 1F:D167:85 52     STA $0052 = #$01
 1F:D169:84 53     STY $0053 = #$00
 1F:D16B:A9 03     LDA #$03
 1F:D16D:4C 84 D3  JMP $D384 -> Run Sysop 0x03 (Restore RAM bank 01)
 
 1F:D170:B1 14     LDA ($14),Y @ $0801 = #$05
 1F:D172:91 0C     STA ($0C),Y @ $000B = #$72
 1F:D174:E6 14     INC $0014 = #$00
 1F:D176:D0 02     BNE $D17A
 1F:D178:E6 15     INC $0015 = #$08
 1F:D17A:E6 0C     INC $000C = #$0A
 1F:D17C:D0 02     BNE $D180
 1F:D17E:E6 0D     INC $000D = #$00
 1F:D180:A5 15     LDA $0015 = #$08
 1F:D182:C9 A0     CMP #$A0
 1F:D184:90 1E     BCC $D1A4
 1F:D186:A9 80     LDA #$80
 1F:D188:85 15     STA $0015 = #$08
 1F:D18A:84 14     STY $0014 = #$00
 1F:D18C:A2 12     LDX #$12
 1F:D18E:20 A9 D1  JSR $D1A9 -> Increment $12/$13
 1F:D191:A5 12     LDA $0012 = #$00
 1F:D193:85 54     STA $0054 = #$78
 1F:D195:A5 13     LDA $0013 = #$00
 1F:D197:85 55     STA $0055 = #$46
 1F:D199:A9 01     LDA #$01
 1F:D19B:85 52     STA $0052 = #$01
 1F:D19D:84 53     STY $0053 = #$00
 1F:D19F:A9 03     LDA #$03
 1F:D1A1:20 84 D3  JSR $D384 ; Restore RAM Bank 01
 1F:D1A4:C6 0E     DEC $000E = #$77
 1F:D1A6:4C 59 D1  JMP $D159
----------------------------------------------------
Function $D1A9

 1F:D1A9:F6 00     INC $00,X @ $0008 = #$00
 1F:D1AB:D0 02     BNE $D1AF
 1F:D1AD:F6 01     INC $01,X @ $0009 = #$00
 1F:D1AF:60        RTS -----------------------------------------
----------------------------------------------------
Function $D1B0

 1F:D1B0:A0 09     LDY #$09
 1F:D1B2:20 00 E1  JSR $E100 -> Save stack data?
 
 1F:D1B5:A5 0A     LDA $000A = #$94
 1F:D1B7:85 0D     STA $000D = #$00
 1F:D1B9:A5 10     LDA $0010 = #$00
 1F:D1BB:85 0F     STA $000F = #$46
 1F:D1BD:A9 AF     LDA #$AF
 1F:D1BF:85 0B     STA $000B = #$72
 1F:D1C1:85 11     STA $0011 = #$00
 1F:D1C3:A9 D8     LDA #$D8
 1F:D1C5:85 0A     STA $000A = #$94
 1F:D1C7:85 10     STA $0010 = #$00
 1F:D1C9:A0 46     LDY #$46
 1F:D1CB:A9 13     LDA #$13
 1F:D1CD:A2 10     LDX #$10
 1F:D1CF:20 46 E1  JSR $E146
 1F:D1D2:88        DEY
 1F:D1D3:D0 F6     BNE $D1CB
 1F:D1D5:84 14     STY $0014 = #$00
 1F:D1D7:A9 0F     LDA #$0F
 1F:D1D9:A2 0A     LDX #$0A
 1F:D1DB:20 46 E1  JSR $E146
 1F:D1DE:20 1E D3  JSR $D31E
 1F:D1E1:A5 08     LDA $0008 = #$00
 1F:D1E3:C5 0D     CMP $000D = #$00
 1F:D1E5:F0 05     BEQ $D1EC
 1F:D1E7:A9 03     LDA #$03
 1F:D1E9:4C 18 D2  JMP $D218
 1F:D1EC:20 1E D3  JSR $D31E
 1F:D1EF:A5 08     LDA $0008 = #$00
 1F:D1F1:C5 0C     CMP $000C = #$0A
 1F:D1F3:F0 05     BEQ $D1FA
 1F:D1F5:A9 02     LDA #$02
 1F:D1F7:4C 18 D2  JMP $D218
 1F:D1FA:20 1E D3  JSR $D31E
 1F:D1FD:A5 08     LDA $0008 = #$00
 1F:D1FF:C5 0E     CMP $000E = #$77
 1F:D201:F0 05     BEQ $D208
 1F:D203:A9 01     LDA #$01
 1F:D205:4C 18 D2  JMP $D218
 1F:D208:20 1E D3  JSR $D31E
 1F:D20B:A5 08     LDA $0008 = #$00
 1F:D20D:C5 0F     CMP $000F = #$46
 1F:D20F:D0 0C     BNE $D21D
 1F:D211:A5 14     LDA $0014 = #$00
 1F:D213:85 08     STA $0008 = #$00
 1F:D215:84 09     STY $0009 = #$00
 1F:D217:60        RTS -----------------------------------------
 1F:D218:A2 0A     LDX #$0A
 1F:D21A:20 46 E1  JSR $E146
 1F:D21D:E6 14     INC $0014 = #$00
 1F:D21F:A5 0B     LDA $000B = #$72
 1F:D221:C5 11     CMP $0011 = #$00
 1F:D223:D0 B2     BNE $D1D7
 1F:D225:A5 0A     LDA $000A = #$94
 1F:D227:C5 10     CMP $0010 = #$00
 1F:D229:90 AC     BCC $D1D7
 1F:D22B:84 08     STY $0008 = #$00
 1F:D22D:84 09     STY $0009 = #$00
 1F:D22F:60        RTS -----------------------------------------
----------------------------------------------------
Function $D230

 1F:D230:A0 07     LDY #$07
 1F:D232:20 00 E1  JSR $E100
 1F:D235:A5 0A     LDA $000A
 1F:D237:85 0D     STA $000D
 1F:D239:A9 AF     LDA #$AF
 1F:D23B:85 0B     STA $000B
 1F:D23D:85 11     STA $0011
 1F:D23F:A9 D8     LDA #$D8
 1F:D241:85 0A     STA $000A
 1F:D243:85 10     STA $0010
 1F:D245:A0 46     LDY #$46
 1F:D247:A9 13     LDA #$13
 1F:D249:A2 10     LDX #$10
 1F:D24B:20 46 E1  JSR $E146
 1F:D24E:88        DEY
 1F:D24F:D0 F6     BNE $D247
 1F:D251:84 14     STY $0014
 1F:D253:84 15     STY $0015
 1F:D255:A9 0F     LDA #$0F
 1F:D257:A2 0A     LDX #$0A
 1F:D259:20 46 E1  JSR $E146
 1F:D25C:20 1E D3  JSR $D31E
 1F:D25F:A5 08     LDA $0008 = #$00
 1F:D261:C5 0D     CMP $000D = #$00
 1F:D263:F0 05     BEQ $D26A
 1F:D265:A9 03     LDA #$03
 1F:D267:4C 81 D2  JMP $D281
 1F:D26A:20 1E D3  JSR $D31E
 1F:D26D:A5 08     LDA $0008 = #$00
 1F:D26F:C5 0C     CMP $000C = #$0A
 1F:D271:D0 0C     BNE $D27F
 1F:D273:E6 15     INC $0015 = #$08
 1F:D275:A5 14     LDA $0014 = #$00
 1F:D277:91 0E     STA ($0E),Y
 1F:D279:E6 0E     INC $000E = #$77
 1F:D27B:D0 02     BNE $D27F
 1F:D27D:E6 0F     INC $000F = #$46
 1F:D27F:A9 02     LDA #$02
 1F:D281:A2 0A     LDX #$0A
 1F:D283:20 46 E1  JSR $E146
 1F:D286:E6 14     INC $0014 = #$00
 1F:D288:A5 0B     LDA $000B = #$72
 1F:D28A:C5 11     CMP $0011 = #$00
 1F:D28C:D0 C7     BNE $D255
 1F:D28E:A5 0A     LDA $000A = #$94
 1F:D290:C5 10     CMP $0010 = #$00
 1F:D292:90 C1     BCC $D255
 1F:D294:A5 15     LDA $0015 = #$08
 1F:D296:85 08     STA $0008 = #$00
 1F:D298:84 09     STY $0009 = #$00
 1F:D29A:60        RTS -----------------------------------------
----------------------------------------------------
Function $D29B

 1F:D29B:A0 07     LDY #$07
 1F:D29D:20 00 E1  JSR $E100
 
 1F:D2A0:A5 0A     LDA $000A
 1F:D2A2:85 0D     STA $000D
 1F:D2A4:A9 66     LDA #$66
 1F:D2A6:85 0B     STA $000B
 1F:D2A8:85 11     STA $0011
 1F:D2AA:A9 62     LDA #$62
 1F:D2AC:85 0A     STA $000A
 1F:D2AE:85 10     STA $0010
 1F:D2B0:A2 10     LDX #$10
 1F:D2B2:A0 10     LDY #$10
 1F:D2B4:A9 15     LDA #$15
 1F:D2B6:20 46 E1  JSR $E146
 1F:D2B9:88        DEY
 1F:D2BA:D0 F8     BNE $D2B4
 1F:D2BC:84 14     STY $0014 = #$00
 1F:D2BE:84 15     STY $0015 = #$08
 1F:D2C0:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D2C2:C5 0D     CMP $000D = #$00
 1F:D2C4:D0 28     BNE $D2EE
 1F:D2C6:C8        INY
 1F:D2C7:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D2C9:C5 0C     CMP $000C = #$0A
 1F:D2CB:D0 21     BNE $D2EE
 1F:D2CD:A0 0F     LDY #$0F
 1F:D2CF:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D2D1:AA        TAX
 1F:D2D2:29 02     AND #$02
 1F:D2D4:D0 18     BNE $D2EE
 1F:D2D6:8A        TXA
 1F:D2D7:29 20     AND #$20
 1F:D2D9:D0 13     BNE $D2EE
 1F:D2DB:8A        TXA
 1F:D2DC:29 08     AND #$08
 1F:D2DE:D0 0E     BNE $D2EE
 1F:D2E0:A0 00     LDY #$00
 1F:D2E2:E6 15     INC $0015 = #$08
 1F:D2E4:A5 14     LDA $0014 = #$00
 1F:D2E6:91 0E     STA ($0E),Y @ $4678 = #$FF
 1F:D2E8:E6 0E     INC $000E = #$77
 1F:D2EA:D0 02     BNE $D2EE
 1F:D2EC:E6 0F     INC $000F = #$46
 1F:D2EE:A9 10     LDA #$10
 1F:D2F0:A2 0A     LDX #$0A
 1F:D2F2:20 46 E1  JSR $E146
 1F:D2F5:E6 14     INC $0014 = #$00
 1F:D2F7:A0 00     LDY #$00
 1F:D2F9:A5 0B     LDA $000B = #$72
 1F:D2FB:C5 11     CMP $0011 = #$00
 1F:D2FD:D0 C1     BNE $D2C0
 1F:D2FF:A5 0A     LDA $000A = #$94
 1F:D301:C5 10     CMP $0010 = #$00
 1F:D303:90 BB     BCC $D2C0
 1F:D305:A5 15     LDA $0015 = #$08
 1F:D307:85 08     STA $0008 = #$00
 1F:D309:84 09     STY $0009 = #$00
 1F:D30B:60        RTS -----------------------------------------
----------------------------------------------------
Function $D30C
If pointer <arg00> >= #$A000, return the dereferenced byte from page FA.
Else, return the dereferenced byte.
Args:
<00> Pointer

 1F:D30C:A0 03     LDY #$03
 1F:D30E:20 00 E1  JSR $E100
 
 1F:D311:A5 0B     LDA $000B
 1F:D313:C9 A0     CMP #$A0
 1F:D315:B0 07     BCS $D31E
 1F:D317:B1 0A     LDA ($0A),Y @ $7295 = #$46
 1F:D319:85 08     STA $0008 = #$00
 1F:D31B:84 09     STY $0009 = #$00
 1F:D31D:60        RTS -----------------------------------------
 1F:D31E:A2 01     LDX #$01
 1F:D320:20 3D D3  JSR $D33D
 1F:D323:4C 1B D3  JMP $D31B
----------------------------------------------------
Function $D326
If pointer <arg00> >= #$A000, return the dereferenced word from page FA.
Else, return the dereferenced word.


 1F:D326:A0 03     LDY #$03
 1F:D328:20 00 E1  JSR $E100
 1F:D32B:A5 0B     LDA $000B
 1F:D32D:C9 A0     CMP #$A0
 1F:D32F:B0 0A     BCS $D33B
 1F:D331:B1 0A     LDA ($0A),Y
 1F:D333:85 08     STA $0008
 1F:D335:C8        INY
 1F:D336:B1 0A     LDA ($0A),Y
 1F:D338:85 09     STA $0009
 1F:D33A:60        RTS -----------------------------------------
 1F:D33B:A2 02     LDX #$02
----------------------------------------------------
Function $D33D 
 1F:D33D:A9 02     LDA #$02
 1F:D33F:85 52     STA $0052
 1F:D341:84 53     STY $0053
 1F:D343:A9 04     LDA #$04
 1F:D345:20 84 D3  JSR $D384 
 1F:D348:A5 66     LDA $0066
 1F:D34A:85 18     STA $0018 ; Store setting of PRG bank 2
 
 1F:D34C:A9 02     LDA #$02
 1F:D34E:85 52     STA $0052
 1F:D350:A9 FA     LDA #$FA
 1F:D352:85 54     STA $0054
 1F:D354:84 53     STY $0053
 1F:D356:84 55     STY $0055 
 1F:D358:A9 03     LDA #$03
 1F:D35A:20 84 D3  JSR $D384 ; Switch PRG bank 2 to #$FA
 
 1F:D35D:A9 08     LDA #$08
 1F:D35F:85 1A     STA $001A
 1F:D361:84 1B     STY $001B
 
 1F:D363:B1 0A     LDA ($0A),Y
 1F:D365:91 1A     STA ($1A),Y
 1F:D367:E6 0A     INC $000A
 1F:D369:D0 02     BNE $D36D
 1F:D36B:E6 0B     INC $000B 
 1F:D36D:E6 1A     INC $001A
 1F:D36F:CA        DEX
 1F:D370:D0 F1     BNE $D363 ; Transfer 1 or 2 bytes from FA:(Source) to $08
 
 1F:D372:A9 02     LDA #$02
 1F:D374:85 52     STA $0052
 1F:D376:A5 18     LDA $0018
 1F:D378:85 54     STA $0054
 1F:D37A:84 53     STY $0053
 1F:D37C:84 55     STY $0055
 1F:D37E:A9 03     LDA #$03
 1F:D380:20 84 D3  JSR $D384 ; Restore PRG Bank 2
 1F:D383:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $D384 -> Run Sysop A

 1F:D384:85 50     STA $0050 = #$10
 1F:D386:84 51     STY $0051 = #$00
 1F:D388:A9 D3     LDA #$D3
 1F:D38A:48        PHA
 1F:D38B:A9 92     LDA #$92
 1F:D38D:48        PHA
 1F:D38E:08        PHP
 1F:D38F:6C DE FF  JMP ($FFDE) = $F962
 1F:D392:EA        NOP
 1F:D393:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $D394

 1F:D394:A0 07     LDY #$07
 1F:D396:20 00 E1  JSR $E100
 1F:D399:A9 70     LDA #$70
 1F:D39B:85 09     STA $0009 = #$00
 1F:D39D:A9 A9     LDA #$A9
 1F:D39F:85 08     STA $0008 = #$00
 1F:D3A1:A2 08     LDX #$08
 1F:D3A3:A5 0A     LDA $000A = #$94
 1F:D3A5:F0 09     BEQ $D3B0
 1F:D3A7:A9 31     LDA #$31
 1F:D3A9:20 46 E1  JSR $E146
 1F:D3AC:C6 0A     DEC $000A = #$94
 1F:D3AE:D0 F7     BNE $D3A7
 1F:D3B0:A5 0E     LDA $000E = #$77
 1F:D3B2:F0 11     BEQ $D3C5
 1F:D3B4:20 46 E1  JSR $E146
 1F:D3B7:06 0E     ASL $000E = #$77
 1F:D3B9:A5 0E     LDA $000E = #$77
 1F:D3BB:20 46 E1  JSR $E146
 1F:D3BE:06 0E     ASL $000E = #$77
 1F:D3C0:A5 0E     LDA $000E = #$77
 1F:D3C2:20 46 E1  JSR $E146
 1F:D3C5:A5 0C     LDA $000C = #$0A
 1F:D3C7:20 46 E1  JSR $E146
 1F:D3CA:B1 08     LDA ($08),Y @ $0001 = #$05
 1F:D3CC:85 08     STA $0008 = #$00
 1F:D3CE:84 09     STY $0009 = #$00
 1F:D3D0:60        RTS -----------------------------------------
----------------------------------------------------
Function $D3D1
Perform (Y) LSRs on (A)

 1F:D3D1:C0 00     CPY #$00
 1F:D3D3:F0 04     BEQ $D3D9
 1F:D3D5:4A        LSR
 1F:D3D6:88        DEY
 1F:D3D7:D0 FC     BNE $D3D5
 1F:D3D9:60        RTS -----------------------------------------
----------------------------------------------------
Function $D3DA
Perform (Y) ASLs on (A)

 1F:D3DA:0A        ASL
 1F:D3DB:88        DEY
 1F:D3DC:D0 FC     BNE $D3DA
 1F:D3DE:60        RTS -----------------------------------------
----------------------------------------------------
Function $D3DF

while (...)
{
 1F:D3DF:B5 01     LDA $01,X @ $0009 = #$00
 1F:D3E1:F0 08     BEQ $D3EB
 1F:D3E3:A9 FF     LDA #$FF
 1F:D3E5:20 50 E1  JSR $E150
 1F:D3E8:4C DF D3  JMP $D3DF
}

 1F:D3EB:A9 C0     LDA #$C0
 1F:D3ED:85 42     STA $0042
 do
 {
	 1F:D3EF:D5 00     CMP $00,X
	 1F:D3F1:90 05     BCC $D3F8
	 if
	 {
		 1F:D3F3:D0 06     BNE $D3FB
		 if
		 {
			 1F:D3F5:94 00     STY $00,X @ $0008 = #$00
			 1F:D3F7:60        RTS -----------------------------------------
		 }
	 }
	 else
	 {
		1F:D3F8:20 50 E1  JSR $E150
	 }
	 1F:D3FB:46 42     LSR $0042 = #$ED
 }
 1F:D3FD:B0 05     BCS $D404
 while ( )
 1F:D3FF:A5 42     LDA $0042 = #$ED
 1F:D401:4C EF D3  JMP $D3EF
 1F:D404:60        RTS -----------------------------------------
----------------------------------------------------
Function $D405

 1F:D405:A0 09     LDY #$09
 1F:D407:20 00 E1  JSR $E100
 1F:D40A:A2 0A     LDX #$0A
 1F:D40C:20 DF D3  JSR $D3DF
 1F:D40F:A2 0C     LDX #$0C
 1F:D411:20 DF D3  JSR $D3DF
 1F:D414:AD 65 72  LDA $7265
 1F:D417:C5 0A     CMP $000A = #$94
 1F:D419:D0 6C     BNE $D487
 1F:D41B:AD 66 72  LDA $7266 = #$FF
 1F:D41E:C5 0C     CMP $000C = #$0A
 1F:D420:D0 65     BNE $D487
 1F:D422:A5 0E     LDA $000E = #$77
 1F:D424:85 16     STA $0016 = #$00
 1F:D426:A5 0A     LDA $000A = #$94
 1F:D428:18        CLC
 1F:D429:65 0C     ADC $000C = #$0A
 1F:D42B:06 0C     ASL $000C = #$0A
 1F:D42D:65 0C     ADC $000C = #$0A
 1F:D42F:85 0A     STA $000A = #$94
 1F:D431:A5 16     LDA $0016 = #$00
 1F:D433:4A        LSR
 1F:D434:85 0C     STA $000C = #$0A
 1F:D436:A2 00     LDX #$00
 1F:D438:90 01     BCC $D43B
 1F:D43A:E8        INX
 1F:D43B:86 16     STX $0016 = #$00
 1F:D43D:A5 10     LDA $0010 = #$00
 1F:D43F:4A        LSR
 1F:D440:85 0E     STA $000E = #$77
 1F:D442:A2 00     LDX #$00
 1F:D444:90 01     BCC $D447
 1F:D446:E8        INX
 1F:D447:86 10     STX $0010 = #$00
 1F:D449:20 99 D3  JSR $D399
 1F:D44C:A5 10     LDA $0010 = #$00
 1F:D44E:0A        ASL
 1F:D44F:65 16     ADC $0016 = #$00
 1F:D451:A8        TAY
 1F:D452:A9 08     LDA #$08
 1F:D454:20 D1 D3  JSR $D3D1
 1F:D457:85 16     STA $0016 = #$00
 1F:D459:A9 D4     LDA #$D4
 1F:D45B:85 19     STA $0019 = #$00
 1F:D45D:A9 8A     LDA #$8A
 1F:D45F:85 18     STA $0018 = #$00
 1F:D461:A2 18     LDX #$18
 1F:D463:A5 08     LDA $0008 = #$00
 1F:D465:4A        LSR
 1F:D466:20 46 E1  JSR $E146
 1F:D469:A5 08     LDA $0008 = #$00
 1F:D46B:29 01     AND #$01
 1F:D46D:85 08     STA $0008 = #$00
 1F:D46F:A9 01     LDA #$01
 1F:D471:38        SEC
 1F:D472:E5 08     SBC $0008 = #$00
 1F:D474:0A        ASL
 1F:D475:0A        ASL
 1F:D476:A8        TAY
 1F:D477:A2 00     LDX #$00
 1F:D479:A1 18     LDA ($18,X)
 1F:D47B:20 D1 D3  JSR $D3D1
 1F:D47E:29 0F     AND #$0F
 1F:D480:25 16     AND $0016
 1F:D482:F0 03     BEQ $D487
 1F:D484:4C 67 E1  JMP $E167 ; Return 0
 1F:D487:4C 5E E1  JMP $E15E ; Return 1
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D480                               0F FF 01 24 8A 53
D490 CE DB 7F FF FE DB 7F FF F4 82 8E DB 7E DB 7F FF
D4A0 FF FF F0 00 00
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D4A0                20 BF E4 00 00 0C D9 07 00 01 00
D4B0 DC D4 04 00 E2 D4 0C 00 E8 D4 21 00 EE D4 22 00 
D4C0 F4 D4 23 00 D6 D4 26 00 CC D4 D5 D4 8E C4 00 61 
D4D0 62 E9 D4 EE 06 CF 8E C5 00 D6 CF D4 8E D2 00 D6 
D4E0 CF D4 8E D0 00 D6 CF D4 8E CF 00 D6 CF D4 8E DB 
D4F0 00 D6 CF D4 8E DC 00 D6 CF D4 

Function $D4A5
Code => Run specific page
01 -> Page D2 (Port view)
04 -> Page D0 (World view - Sailing?)
0C -> Page CF (World view - Exploring?)
21 -> Page DB (Poker)
22 -> Page DC (Blackjack)
23 -> Page C5 (Adjust nation stats?)
26 -> Page C4 (Start mission?)


D4AA 0C
D4AB D9 07 00
     01 00 DC D4
	 04 00 E2 D4
	 0C 00 E8 D4
	 21 00 EE D4
	 22 00 F4 D4
	 23 00 D6 D4
	 26 00 CC D4
	       D5 D4

Case 26
	D4CC 8E C4 00
	D4CF 61
	D4D0 62
	D4D1 E9 D4 EE 06 / Run page C4 (Start mission?)
Default:
	D4D5 CF
Case 23
	D4D6 8E C5 00
	D4D9 D6 CF D4    / Run page C5
Case 01
	D4DC 8E D2 00
	D4DF D6 CF D4    / Run page D2
Case 04
	D4E2 8E D0 00
	D4E5 D6 CF D4    / Run page D0
Case 0C
	D4E8 8E CF 00
	D4EB D6 CF D4    / Run page CF
Case 21
	D4EE 8E DB 00
	D4F1 D6 CF D4    / Run page DB
Case 22
	D4F4 8E DC 00
	D4F7 D6 CF D4    / Run page DC

----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D4F0                               20 BF E4 00 00 0D 
D500 A9 68 72 0C D9 04 00 02 00 19 D5 03 00 23 D5 24 
D510 00 29 D5 25 00 22 D5 22 D5 8E C9 00 61 62 E9 D4 
D520 EE 06 CF 8E C6 00 D6 1C D5 8E CB 00 D6 1C D5 D6 
D530 22 D5 

Function $D4FA (00 00)

D4FF 0D
D500 A9 68 72    / $7268
D503 0C
D504 D9 04 00
     02 00 19 D5 / Case 0x02: $D519
	 03 00 23 D5 / Case 0x03: $D523
	 24 00 29 D5 / Case 0x24: $D529
	 25 00 22 D5 / Case 0x25: $D522
	       22 D5 /   Default: $D522

Case 0x02		   
	D519 8E C9 00
	D51C 61
	D51D 62
	D51E E9 D4 EE 06 / Call $EED4 -> Sysop 0x02 (Run page C9)
Case 0x25 / Default
	D522 CF
Case 0x03
	D523 8E C6 00
	D526 D6 1C D5    / Call $EED4 -> Sysop 0x02 (Run page C6)
Case 0x24
	D529 8E CB 00
	D52C D6 1C D5    / Call $EED4 -> Sysop 0x02 (Run page CB)
	
D52F D6 22 D5    /
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D530       20 BF E4 00 00 0C 55 C6 D8 47 D5 0C 8B 15 
D540 B5 8C 1C 6B D6 4E D5 0C 8B 15 B5 8C 18 A4 BB CF 

Function $D532 (00 00) -> Get pointer to name of ship <00>?
Args:
<0C> Ship #

D537 0C
D538 55
D539 C6
D53A D8 47 D5

if (less than 0x05)
{
	D53D 0C
	D53E 8B 15
	D540 B5
	D541 8C 1C 6B    / $6B1C
	D544 D6 4E D5
}
else
{
	D547 0C
	D548 8B 15
	D54A B5
	D54B 8C 18 A4    / $A418
}

D54E BB
D54F CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D550 20 BF E4 00 00 0C 8B 1F C1 D8 67 D5 0C 8B 11 B5 
D560 8C 04 B6 BB D6 6A D5 8A 9D 6B CF 

Function $D550 (00 00) - Get pointer to name of Item ID <00>
<0C> Item ID

D555 0C
D556 8B 1F
D558 C1
D559 D8 67 D5

if (item ID > 0x1F)
	D55C 0C
	D55D 8B 11
	D55F B5
	D560 8C 04 B6    / $B604
	D563 BB
	D564 D6 6A D5
else
	D567 8A 9D 6B    / $6B9D

D56A CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D560                                  20 BF E4 FE FF 
D570 0C 8C FF 9F C8 D8 88 D5 62 64 E9 D4 EE 04 2B 8E 
D580 FA 00 62 63 E9 D4 EE 06 60 3C E9 03 C0 04 0C 8C 
D590 FF 9F C8 D8 9D D5 3B 62 63 E9 D4 EE 06 CF 

Function $D56B (FE FF) -> Print string <00>
Args:
<0C> Pointer to string

D571 0C
D572 8C FF 9F
D575 C8
D576 D8 88 D5

if (address is $A000+)
{
	D579 62
	D57A 64
	D57B E9 D4 EE 04 / Call $EED4 -> Sysop 0x04 (Get Page of RAM Bank 02)
	D57F 8E FA 00
	D582 62
	D583 63
	D584 E9 D4 EE 06 / Call $EED4 -> Sysop 0x03 (Set RAM Bank 2 to Page FA)
}

D588 60
D589 3C
D58A E9 03 C0 04 / Call $C003 -> Print

D58D 0C
D58E 8C FF 9F
D592 C8
D593 D8 9D D5

if (address is $A000+)
{
	D596 3B
	D597 62
	D598 63
	D599 E9 D4 EE 06 / Call $EED4 -> Sysop 0x03 (Reset value of RAM bank 02)
}

D59D CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D590                                           20 BF 
D5A0 E4 FA FF 45 CD 0C B5 2C 0C 57 B5 8C 90 6C BB 2A 
D5B0 8F 23 29 40 2B D6 CB D5 0A 76 D3 8B 40 DA D8 C8 
D5C0 D5 0A 74 B0 CD 0B BB 2B 0A 77 2A 0A 19 C6 D7 B8 
D5D0 D5 0B CF 

Function $D59E (FA FF)

D5A3 45
D5A4 CD
D5A5 0C
D5A6 B5
D5A7 2C

D5A8 0C
D5A9 57
D5AA B5
D5AB 8C 90 6C
D5AE BB
D5AF 2A

D5B0 8F 23
D5B2 29

D5B3 40
D5B4 2B

D5B5 D6 CB D5

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D5B0 8F 23 29 40 2B D6 CB D5 0A 76 D3 8B 40 DA D8 C8 
D5C0 D5 0A 74 B0 CD 0B BB 2B 0A 77 2A 0A 19 C6 D7 B8 
D5D0 D5 0B CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D5D0          20 BF E4 F6 FF 0C D8 DF D5 89 32 CF 8A 
D5E0 90 6C 29 8F 23 28 8A A4 6A 27 40 2B 2A D6 0B D6
D5F0 09 76 D3 8B 40 DA D8 04 D6 07 8F 16 D3 CD 0B BB
D600 2B 0A D0 2A 07 8F 18 27 09 77 29 09 18 C6 D7 F0 
D610 D5 0B 1A B6 CF 

Function $D5D3 (F6 FF)
Args:
<0C>

D5D8 0C
D5D9 D8 DF D5

if
	D5DC 89 32
	D5DE CF          / Return 50

D5DF 8A 90 6C    
D5E2 29          / loc_09 = 0x6C90
D5E3 8F 23
D5E5 28          / loc_08 = 35
D5E6 8A A4 6A
D5E9 27          / loc_07 = 0x6AA4
D5EA 40
D5EB 2B          / loc_0b = 0
D5EC 2A          / loc_0a = 0
D5ED D6 0B D6

LOOP:
	D5F0 09
	D5F1 76
	D5F2 D3
	D5F3 8B 40
	D5F5 DA
	D5F6 D8 04 D6
	
	if
		D5F9 07
		D5FA 8F 16
		D5FC D3
		D5FD CD
		D5FE 0B
		D5FF BB
		D600 2B
		D601 0A
		D602 D0
		D603 2A
	
	D604 07
	D605 8F 18
	D607 27

	D608 09
	D609 77
	D60A 29

BOUNDS CHECK:
	D60B 09
	D60C 18
	D60D C6
	D60E D7 F0 D5
	
D611 0B
D612 1A
D613 B6
D614 CF

----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D610                20 BF E4 F8 FF 8A 90 6C 2B 8F 23 
D620 2A 8A A4 6A 29 40 28 D6 46 D6 0B 76 D3 8B 40 DA 
D630 D8 3C D6 09 D3 1C C0 D8 3C D6 08 CF 08 D0 28 09 
D640 8F 18 29 0B 77 2B 0B 1A C6 D7 2A D6 60 E9 15 D6 
D650 02 CF 

Function $D615 (F8 FF) -> Find ship # of navigator <00>
Args:
<0C> Mate #

D61A 8A 90 6C    / $6C90 (array, entry size 7)
D61D 2B

D61E 8F 23
D620 2A

D621 8A A4 6A    / $6AA4
D624 29
D625 40
D626 28
D627 D6 46 D6

LOOP:
	D62A 0B
	D62B 76
	D62C D3
	D62D 8B 40
	D62F DA
	D630 D8 3C D6
	
	if
		D633 09
		D634 D3
		D635 1C
		D636 C0
		D637 D8 3C D6
		
		if
			D63A 08
			D63B CF
	
	D63C 08
	D63D D0
	D63E 28
	D63F 09
	D640 8F 18
	D642 29
	D643 0B
	D644 77
	D645 2B

BOUNDS CHECK:
	D646 0B
	D647 1A
	D648 C6
	D649 D7 2A D6
	
D64C 60
D64D E9 15 D6 02 / Call $D615 -> Find ship navigated by player
D651 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D650       20 BF E4 F2 FF 8A 24 B8 26 8F 40 25 8A 6D 
D660 66 2B 40 29 40 2A D6 9E D6 0A 5F DA B3 41 B4 BD 
D670 B3 0A 54 BE D2 1B BB B0 B4 DA D8 98 D6 06 D0 B3 
D680 E9 0C D3 02 27 B3 09 B4 C6 D8 98 D6 36 E9 0C D3 
D690 02 1C C0 D8 98 D6 07 29 0A D0 2A 06 72 26 06 15 
D6A0 C6 D7 69 D6 09 CF 

Function $D652 -> Get item rank type <0C>
00: ?
01: Amulet
02: Sword
03: Icon

D657 8A 24 B8
D65A 26       .. / loc_26 = $B824 (start ptr)
D65B 8F 20
D65D 25       .. / loc_25 = end ptr

D65E 8A 6D 66 .. / $666D (item flags)
D661 2B

D662 40
D663 29

D664 40
D665 2A

D666 D6 9E D6

D669 0A
D66A 5F
D66B DA
D66C B3
D66D 41
D66E B4
D66F BD
D670 B3
D671 0A
D672 54
D673 BE
D674 D2
D675 1B
D676 BB
D677 B0
D678 B4
D679 DA
D67A D8 98 D6

D67D 06
D67E D0
D67F B3
D680 E9 0C D3 02 / Call $D30C -> Get byte
D684 27
D685 B3
D686 09
D687 B4
D688 C6
D689 D8 98 D6

D68C 36
D68D E9 0C D3 02 / Call $D30C -> Get byte
D691 1C
D692 C0
D693 D8 98 D6

D696 07
D697 29

D698 0A
D699 D0
D69A 2A

D69B 06
D69C 72
D69D 26

D69E 06
D69F 15
D6A0 C6
D6A1 D7 69 D6

D6A4 09
D6A5 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D6A0                   20 BF E4 FA FF 8A 9A 6A 2B 40 
D6B0 29 2A D6 C5 D6 3C 0B D3 D4 0A D0 2A 0B D0 2B 09 
D6C0 D0 29 0C D0 2C 09 5A C6 D8 D4 D6 0B D3 8C FF 00 
D6D0 C1 D7 B5 D6 0A CF 

Function $D6A6 (FA FF) -> Assemble list of mates?
Args:
<0C> Pointer to destination address

D6AB 8A 9A 6A    / cur_ptr = (start of mates list)
D6AE 2B          

D6AF 40          
D6B0 29          
D6B1 2A          

D6B2 D6 C5 D6    

LOOP:
	D6B5 3C          
	D6B6 0B          
	D6B7 D3          
	D6B8 D4          

	D6B9 0A          
	D6BA D0          
	D6BB 2A    

	D6BC 0B          
	D6BD D0          
	D6BE 2B .. .. .. / cur_ptr++;         

	D6BF 09          
	D6C0 D0          
	D6C1 29          

	D6C2 0C          
	D6C3 D0          
	D6C4 2C .. .. .. / dest_ptr++;
BOUNDS CHECK:
	D6C5 09          
	D6C6 5A          
	D6C7 C6          
	D6C8 D8 D4 D6    
	D6CB 0B          
	D6CC D3          
	D6CD 8C FF 00    
	D6D0 C1          
	D6D1 D7 B5 D6    

D6D4 0A          
D6D5 CF          
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D6D0                   20 BF E4 F6 FF 3C E9 A6 D6 02 
D6E0 28 08 D7 E7 D6 40 CF 60 E9 15 D6 02 27 40 29 0C 
D6F0 2B 18 BB 2A D6 10 D7 0C D3 B3 E9 15 D6 02 17 C0 
D700 D8 0D D7 3B 0C D3 D4 0B D0 2B 09 D0 29 0C D0 2C 
D710 0C 1A C6 D7 F7 D6 09 CF 

Function $D6D6 (F6 FF)
Args:
<0C> Pointer to destination address

D6DB 3C
D6DC E9 A6 D6 02 / Call $D6A6 -> Assemble list of mates
D6E0 28          / loc_08 = num of mates

D6E1 08
D6E2 D7 E7 D6

if (no mates)
	D6E5 40
	D6E6 CF          / Return 0
	
D6E7 60
D6E8 E9 15 D6 02 / Call $D615 -> Find ship navigated by player
D6EC 27

D6ED 40
D6EE 29

D6EF 0C          / (mate array)
D6F0 2B          / loc_0B = start_ptr
D6F1 18
D6F2 BB
D6F3 2A          / loc_0A = end_ptr

D6F4 D6 10 D7

D6F7 0C
D6F8 D3
D6F9 B3
D6FA E9 15 D6 02 / Call $D615 -> Find ship navigated by mate
D6FE 17
D6FF C0
D700 D8 0D D7

if same as player
	D703 3B
	D704 0C
	D705 D3
	D706 D4
	D707 0B
	D708 D0
	D709 2B
	D70A 09
	D70B D0
	D70C 29

D70D 0C
D70E D0
D70F 2C

D710 0C
D711 1A
D712 C6
D713 D7 F6 D6

D716 09
D717 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D710                         20 BF E4 F6 FF 3C E9 A6 
D720 D6 02 27 07 D7 29 D7 40 CF 60 E9 15 D6 02 28 40 
D730 29 0C 2B 17 BB 2A D6 52 D7 0C D3 B3 E9 15 D6 02 
D740 18 C1 D8 4F D7 3B 0C D3 D4 0B D0 2B 09 D0 29 0C 
D750 D0 2C 0C 1A C6 D7 39 D7 09 CF 

Function $D718 (F6 FF)
Args:
<0C> ?

D71D 3C
D71E E9 A6 D6 02 / Call $D6A6
D722 27

D723 07
D724 D7 29 D7

D727 40
D728 CF

D729 60
D72A E9 15 D6 02 / Call $D615
D72E 28

D72F 40
D730 29

D731 0C
D732 2B
D733 17
D734 BB
D735 2A

D736 D6 52 D7

D739 0C
D73A D3
D73B B3
D73C E9 15 D6 02 / Call $D615
D740 18
D741 C1
D742 D8 4F D7

D745 3B
D746 0C
D747 D3
D748 D4
D749 0B
D74A D0
D74B 2B
D74C 09
D74D D0
D74E 29

D74F 0C
D750 D0
D751 2C

D752 0C
D753 1A
D754 C6
D755 D7 39 D7

D758 09
D759 CF

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D740 18 C1 D8 4F D7 3B 0C D3 D4 0B D0 2B 09 D0 29 0C 
D750 D0 2C 0C 1A C6 D7 39 D7 09 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D750                               20 BF E4 F8 FF 8A 
D760 90 6C 2B 8F 23 2A 8A A4 6A 29 40 28 D6 89 D7 0B 
D770 76 D3 8B 40 DA D8 82 D7 3C 09 D3 D4 0C D0 2C 08 
D780 D0 28 09 8F 18 29 0B 77 2B 0B 1A C6 D7 6F D7 08 
D790 CF 

Function $D75A (F8 FF)

D75F 8A 90 6C    / $6C90
D762 2B

D763 8F 23
D765 2A

D766 8A A4 6A    / $6AA4

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D760 90 6C 2B 8F 23 2A 8A A4 6A 29 40 28 D6 89 D7 0B 
D770 76 D3 8B 40 DA D8 82 D7 3C 09 D3 D4 0C D0 2C 08 
D780 D0 28 09 8F 18 29 0B 77 2B 0B 1A C6 D7 6F D7 08 
D790 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D790    20 BF E4 EA FF DE F6 FF B3 E9 D6 D6 02 22 02 
D7A0 D7 A7 D7 8A FF 00 CF 40 24 DE F6 FF 26 12 BB 25 
D7B0 D6 D0 D7 06 D3 57 B5 8C 42 65 BB 21 01 73 D3 B3 
D7C0 04 B4 C6 D8 CD D7 01 73 D3 24 06 D3 23 06 D0 26 
D7D0 06 15 C6 D7 B3 D7 03 CF 

Function $D791 (EA FF) -> Finds the mate (other than the player) w/ the highest sailing level

D796 DE F6 FF
D799 B3
D79A E9 D6 D6 02 / Call $D6D6 -> Assemble list of mates not on player's ship?
D79E 22          / loc_02 = # of mates

D79F 02
D7A0 D7 A7 D7

if no mates:
	D7A3 8A FF 00
	D7A6 CF

D7A7 40
D7A8 24 .. .. .. / loc_04 = 0
D7A9 DE F6 FF
D7AC 26          / loc_06 = start_ptr
D7AD 12
D7AE BB
D7AF 25          / loc_05 = end_ptr
D7B0 D6 D0 D7

D7B3 06
D7B4 D3
D7B5 57
D7B6 B5
D7B7 8C 42 65
D7BA BB
D7BB 21          / loc_01 = cur_mate
D7BC 01
D7BD 73
D7BE D3          / sailing level
D7BF B3
D7C0 04
D7C1 B4
D7C2 C6
D7C3 D8 CD D7

	D7C6 01
	D7C7 73
	D7C8 D3
	D7C9 24          / best_sailing = cur_mate.sailing_level
	D7CA 06
	D7CB D3
	D7CC 23 .. .. .. / best_mate = cur_mate

D7CD 06
D7CE D0
D7CF 26

D7D0 06
D7D1 15
D7D2 C6
D7D3 D7 B3 D7

D7D6 03
D7D7 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D7D0                         20 BF E4 FA FF 0C 5E B5 
D7E0 8C BA 67 BB 2B 0B 1D BB D3 1E BB 8B 64 C4 D8 FB 
D7F0 D7 0B 1D BB D3 B3 89 64 B4 BC 2E 0E B3 0B 1D BB 
D800 B4 B3 D3 BB D4 0B 72 D3 B3 0B D0 D3 B3 0B D3 B4 
D810 BB B4 BB 29 09 8B 64 C4 D8 49 D8 09 8F 9C 2E 40 
D820 2A 0A 1D C1 D8 3C D8 0B 1A BB D3 D8 3C D8 0E D8 
D830 3C D8 0B 1A BB B3 D3 D1 D4 0E D1 2E 0A D0 2A 0A 
D840 53 C6 D7 21 D8 0E D7 1F D8 8E FC 00 0C 8C 76 6F 
D850 BB B4 B3 D3 DA D4 40 2A 0B 1A BB D3 B3 89 4F B4 
D860 C6 D8 71 D8 0A D0 B3 0C 8C 76 6F BB B4 B3 D3 DB 
D870 D4 0A D0 2A 0A 53 C6 D7 58 D8 CF 

Function $D7D8 -> Add <0E> support for nation <0D> to Port ID <0C>
Args:
<0C> Port ID
<0D> Nation to add support for
<0E> Amount of support to add

D7DD 0C
D7DE 5E
D7DF B5
D7E0 8C BA 67 .. / $67BA (Nation support)
D7E3 BB
D7E4 2B

D7E5 0B
D7E6 1D
D7E7 BB
D7E8 D3
D7E9 1E
D7EA BB
D7EB 8B 64
D7ED C4
D7EE D8 FB D7

	D7F1 0B
	D7F2 1D
	D7F3 BB
	D7F4 D3
	D7F5 B3
	D7F6 89 64
	D7F8 B4
	D7F9 BC
	D7FA 2E

D7FB 0E
D7FC B3
D7FD 0B
D7FE 1D
D7FF BB
D800 B4
D801 B3
D802 D3
D803 BB
D804 D4

D805 0B
D806 72
D807 D3 
D808 B3
D809 0B
D80A D0
D80B D3
D80C B3
D80D 0B
D80E D3
D80F B4
D810 BB
D811 B4
D812 BB
D813 29

D814 09
D815 8B 64
D817 C4
D818 D8 49 D8

D81B 09
D81C 8F 9C
D81E 2E

Loop:
D81F 40
D820 2A

Loop:
D821 0A
D822 1D
D823 C1
D824 D8 3C D8

D827 0B
D828 1A
D829 BB
D82A D3
D82B D8 3C D8

D82E 0E
D82F D8 3C D8

D832 0B
D833 1A
D834 BB
D835 B3
D836 D3
D837 D1
D838 D4

D839 0E
D83A D1
D83B 2E

D83C 0A
D83D D0
D83E 2A

D83F 0A
D840 53
D841 C6
D842 D7 21 D8

D845 0E
D846 D7 1F D8

D849 8E FC 00
D84C 0C
D84D 8C 76 6F .. / $6F76
D850 BB
D851 B4
D852 B3
D853 D3
D854 DA
D855 D4
D856 40
D857 2A

D858 0B
D859 1A
D85A BB
D85B D3
D85C B3
D85D 89 4F
D85F B4
D860 C6
D861 D8 71 D8

D864 0A
D865 D0
D866 B3
D867 0C
D868 8C 76 6F .. / $6F76
D86B BB
D86C B4
D86D B3
D86E D3
D86F DB
D870 D4

D871 0A
D872 D0
D873 2A

D874 0A
D875 53
D876 C6
D877 D7 58 D8

D87A CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D870                                  20 BF E4 FC FF 
D880 0C 57 B5 8C 96 6C BB D3 5F DA B3 E9 32 D5 02 8F 
D890 14 B3 E9 0C D3 02 55 BE 57 DA 5A B5 2B 0C 57 B5 
D8A0 8C 96 6C BB D3 5F DA B3 E9 32 D5 02 8F 14 B3 E9 
D8B0 0C D3 02 53 DA 5A B5 2A 0B 1A BB 8F 14 CF 

Function $D87B (FC FF) -> Return max durability of ship# <00>

D880 0C
D881 57
D882 B5
D883 8C 96 6C    / $6C96
D886 BB
D887 D3
D888 5F
D889 DA          / Ship ID#
D88A B3
D88B E9 32 D5 02 / Call $D532 -> Get pointer to ship ($6B1C array)
D88F 8F 14
D891 B3
D892 E9 0C D3 02 / Call $D30C -> Get byte
D896 55
D897 BE          / 5 right shifts
D898 57
D899 DA
D89A 5A
D89B B5
D89C 2B

D89D 0C
D89E 57
D89F B5
D8A0 8C 96 6C
D8A3 BB
D8A4 D3
D8A5 5F
D8A6 DA
D8A7 B3
D8A8 E9 32 D5 02 / Call $D532
D8AC 8F 14
D8AE B3
D8AF E9 0C D3 02 / Call $D30C
D8B3 53
D8B4 DA
D8B5 5A
D8B6 B5
D8B7 2A

D8B8 0B
D8B9 1A
D8BA BB
D8BB 8F 14

D8BD CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D8B0                                           20 BF 
D8C0 E4 FA FF 0C 57 B5 8C 96 6C BB D3 5F DA B3 E9 32 
D8D0 D5 02 8F 14 B3 E9 0C D3 02 55 BE 57 DA 2B 0C 57 
D8E0 B5 8C 96 6C BB D3 5F DA B3 E9 32 D5 02 8F 14 B3 
D8F0 E9 0C D3 02 52 BE 53 DA 2A 0C 57 B5 8C 96 6C BB
D900 D3 5F DA B3 E9 32 D5 02 8F 14 B3 E9 0C D3 02 54
D910 BE 51 DA 29 44 19 BC B3 4A 1A BC B3 89 14 1B BC
D920 8B 64 B5 8B 14 B6 B4 B5 5A B6 B4 B5 54 B6 CF 

Function $D8BE -> Return max handling for ship <00>

D8C3 0C
D8C4 57
D8C5 B5
D8C6 8C 96 6C
D8C9 BB
D8CA D3
D8CB 5F
D8CC DA
D8CD B3
D8CE E9 32 D5 02 / Call $D532 -> Get Ptr to ship

D8D2 8F 14
D8D4 B3
D8D5 E9 0C D3 02 / Call $D30C -> Get byte
D8D9 55
D9DA BE
D8DB 57
D8DC DA
D8DD 2B

D8DE 0C
D8DF 57
D8E0 B5
D8E1 8C 96 6C
D8E4 BB
D8E5 D3
D8E6 5F
D8E7 DA
D8E8 B3
D8E9 E9 32 D5 02 / Call $D532
D8ED 8F 14
D8EF B3
D8F0 E9 0C D3 02 / Call $D30C
D8F4 52
D8F5 BE
D8F6 53
D8F7 DA

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D8F0 E9 0C D3 02 52 BE 53 DA 2A 0C 57 B5 8C 96 6C BB
D900 D3 5F DA B3 E9 32 D5 02 8F 14 B3 E9 0C D3 02 54
D910 BE 51 DA 29 44 19 BC B3 4A 1A BC B3 89 14 1B BC
D920 8B 64 B5 8B 14 B6 B4 B5 5A B6 B4 B5 54 B6 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D920                                              20
D930 BF E4 F8 FF 0C 57 B5 8C 96 6C BB D3 5F DA B3 E9
D940 32 D5 02 8F 14 B3 E9 0C D3 02 55 BE 57 DA 2A 0C
D950 57 B5 8C 96 6C BB D3 5F DA B3 E9 32 D5 02 8F 14
D960 B3 E9 0C D3 02 52 BE 53 DA 29 0C 57 B5 8C 96 6C
D970 BB D3 5F DA B3 E9 32 D5 02 8F 14 B3 E9 0C D3 02
D980 54 BE 51 DA 28 08 73 B3 4A 1A BC B3 09 5A B5 8F
D990 64 B4 B5 5A B6 B4 B5 54 B6 2B 0B 8B 64 C4 D8 A6
D9A0 D9 89 64 D6 A7 D9 0B CF 

Function $D92F 

D934 0C
D935 57
D936 B5
D937 8C 96 6C .. / $6C96
D93A BB
D93B D3
D93C 5F
D93D DA
D93E B3
D93F E9 32 D5 02 / Call $D532 -> Get ptr to ship
D943 8F 14
D945 B3
D946 E9 0C D3 02 / Call $D30C -> Get byte
D94A 55
D94B BE
D94C 57
D94D DA
D94E 2A

D94F 0C
D950 

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D950 57 B5 8C 96 6C BB D3 5F DA B3 E9 32 D5 02 8F 14
D960 B3 E9 0C D3 02 52 BE 53 DA 29 0C 57 B5 8C 96 6C
D970 BB D3 5F DA B3 E9 32 D5 02 8F 14 B3 E9 0C D3 02
D980 54 BE 51 DA 28 08 73 B3 4A 1A BC B3 09 5A B5 8F
D990 64 B4 B5 5A B6 B4 B5 54 B6 2B 0B 8B 64 C4 D8 A6
D9A0 D9 89 64 D6 A7 D9 0B CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D9A0                         20 BF E4 FC FF 0C 57 B5
D9B0 8C 96 6C BB D3 5F DA B3 E9 32 D5 02 8F 14 B3 E9
D9C0 0C D3 02 55 BE 57 DA 2A 0A 55 B6 8B 32 B5 B3 0A
D9D0 72 52 B6 8C 2C 01 B5 B3 0A 52 B9 1A B5 8B 32 B5
D9E0 B4 BB B4 BB 90 38 FF 2B 0B CF 

Function $D9A8 (FC FF)
Args:
<0C>

D9AD 0C
D9AE 57
D9AF B5
D9B0 8C 96 6C    / $6C96
D9B3 BB
D9B4 D3
D9B5 5F
D9B6 DA
D9B7 B3
D9B8 E9 32 D5 02 / Call $D532
D9BC 8F 14
D9BE B3
D9BF E9 0C D3 02 / Call $D30C -> Get byte
D9C3 55
D9C4 BE
D9C5 57
D9C6 DA
D9C7 2A

D9C8 0A
D9C9 55
D9CA B6
D9CB 8B 32
D9CD B5
D9CE B3
D9CF 0A
D9D0 72
D9D1 52
D9D2 B6
D9D3 8C 20 01
D9D6 B5
D9D7 B3
D9D8 0A
D9D9 52
D9DA B9
D9DB 1A
D9DC B5
D9DD 8B 32
D9DF B5
D9E0 B4
D9E1 BB
D9E2 B4
D9E3 BB
D9E4 90 38 FF
D9E7 2B

D9E8 0B
D9E9 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
D9E0                               20 BF E4 F8 FF 0C
D9F0 8B 18 B5 8C A4 6A BB 28 08 76 2A 7A 29 40 2B D6
DA00 0B DA 0A B0 CD 0B BB 2B 0A 72 2A 0A 19 C6 D7 02
DA10 DA 08 8F 14 B0 B3 08 8F 12 B0 5A B6 B3 08 8F 10
DA20 B0 5A B6 B4 BB B4 BB 1B BB CF 

Function $D9EA (F8 FF)
Args:
<0C> Ship #

D9EF 0C
D9F0 8B 18
D9F2 B5
D9F3 8C A4 6A    / $6AA4
D9F6 BB
D9F7 28          / Ship

D9F8 08
D9F9 76
D9FA 2A          / Ship - Cargo

D9FB 7A
D9FC 29          / Ship - Food

D9FD 40
D9FE 2B

D9FF D6 0B DA

Loop:
	DA02 0A
	DA03 B0
	DA04 CD
	DA05 0B
	DA06 BB
	DA07 2B
	
	DA08 0A
	DA09 72
	DA0A 2A

Bounds check:
	DA0B 0A
	DA0C 19
	DA0D C6
	DA0E D7 02 DA
	
DA11 08
DA12 8F 14
DA14 B0
DA15 B3
DA16 08
DA17 8F 12
DA19 B0
DA1A 5A
DA1B B6
DA1C B3
DA1D 08
DA1E 8F 10
DA20 B0
DA21 5A
DA22 B6
DA23 B4
DA24 BB
DA25 B4
DA26 BB
DA27 1B
DA28 BB
DA29 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DA20                               20 BF E4 F8 FF 0C
DA30 8B 18 B5 8C A4 6A BB 28 08 76 2B 7A 2A 40 29 D6
DA40 4B DA 0B B0 CD 09 BB 29 0B 72 2B 0B 1A C6 D7 42
DA50 DA 08 8F 14 B0 B3 08 8F 12 B0 5A B6 B3 08 8F 10
DA60 B0 5A B6 B4 BB B4 BB 19 BB CF 

Function $DA2A -> Gets the weight of cargo/supplies on ship #<0C>
Args:
<0C> Ship #

DA2F 0C
DA30 8B 18
DA32 B5
DA33 8C A4 6A .. / $6AA4 (Ships)
DA36 BB
DA37 28          / loc_08 = ptr to ship

DA38 08
DA39 76
DA3A 2B          / loc_0B = ptr to cargo array
DA3B 7A
DA3C 2A          / loc_0A = ptr to end of cargo data

DA3D 40
DA3E 29

DA3F D6 4B DA

Loop through each item in cargo amt array:
	DA42 0B
	DA43 B0
	DA44 CD
	DA45 09
	DA46 BB
	DA47 29      / loc_09 = sum of weights of cargo
	DA48 0B
	DA49 72
	DA4A 2B

	DA4B 0B
	DA4C 1A
	DA4D C6
	DA4E D7 42 DA
	
DA51 08
DA52 8F 14
DA54 B0
DA55 B3
DA56 08
DA57 8F 12
DA59 B0
DA5A 5A
DA5B B6    / water / 10
DA5C B3
DA5D 08
DA5E 8F 10
DA60 B0
DA61 5A
DA62 B6    / food / 10
DA63 B4
DA64 BB
DA65 B4
DA66 BB
DA67 19
DA68 BB
DA69 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DA60                               20 BF E4 FE FF 0C
DA70 57 B5 8C 90 6C BB 2B 0B 74 B0 B3 0B 73 D3 B3 3C
DA80 E9 2A DA 02 B4 BB B4 BB CF 

Function $DA6A -> Gets the total load of ship #<0C>
Args:
<0C> Ship #

DA6F 0C
DA70 57
DA71 B5
DA72 8C 90 6C .. / $6C90
DA75 BB
DA76 2B

DA77 0B
DA78 74
DA79 B0
DA7A B3          / # of crewmen
DA7B 0B
DA7C 73
DA7D D3
DA7E B3          / # of arms
DA7F 3C
DA80 E9 2A DA 02 / Call $DA2A (get weight of cargo/supplies of ship)
DA84 B4
DA85 BB
DA86 B4
DA87 BB
DA88 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DA80                            20 BF E4 FA FF 45 CD
DA90 A0 0B 00 B5 A2 0B 00 40 2B 40 D6 C8 DA A0 0B 00
DAA0 1A BB 57 B5 8C 90 6C BB 29 09 76 D3 8B 40 DA D8
DAB0 C6 DA 09 76 D3 5F DA B3 E9 32 D5 02 7F B3 E9 26
DAC0 D3 02 CD 0B BB 2B 0A D0 2A 0A 55 C6 D7 9D DA 0B
DAD0 CF 

Function $DA89 -> Tallies ? for every ship with particular flag
Args:
+0B

DA8E 45
DA8F CD
DA90 A0 0B 00
DA93 B5
DA94 A2 0B 00

DA97 40
DA98 2B

DA99 40
DA9A D6 C8 DA

DA9D A0 0B 00
DAA0 1A
DAA1 BB
DAA2 57
DAA3 B5
DAA4 8C 90 6C .. / $6C90 (ships)
DAA7 BB
DAA8 29

DAA9 09
DAAA 76
DAAB D3       .. / flags?
DAAC 8B 40
DAAE DA
DAAF D8 C6 DA

	DAB2 09
	DAB3 76
	DAB4 D3
	DAB5 5F
	DAB6 DA
	DAB7 B3
	DAB8 E9 32 D5 02 / Call $D532 (get ptr to ship)
	DABC 7F
	DABD B3
	DABE E9 26 D3 02 / Call $D326 (get word)
	DAC2 CD
	DAC3 0B
	DAC4 BB
	DAC5 2B

DAC6 0A
DAC7 D0

DAC8 2A
DAC9 0A
DACA 55
DACB C6
DACC D7 9D DA

DACF 0B
DAD0 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DAD0    20 BF E4 F4 FF 40 2B 8A 00 10 28 0C 5A BD CD
DAE0 08 BB 28 64 E9 E1 CF 02 26 06 58 BD CD 08 BB 28
DAF0 64 E9 E1 CF 02 26 06 56 BD CD 08 BB 28 64 E9 E1
DB00 CF 02 26 06 54 BD CD 08 BB 28 64 E9 E1 CF 02 26
DB10 06 D2 D2 CD 08 BB 28 64 E9 E1 CF 02 26 06 CD 08
DB20 BB 28 8A 49 65 2A 90 1F 01 29 D6 3F DB 0A 74 B0
DB30 27 07 18 C0 D8 3C DB 41 2B D6 45 DB 0A 77 2A 0A
DB40 19 C6 D7 2D DB 0B D7 D6 DA 08 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DB40                                  20 BF E4 FC FF
DB50 0C D1 8B 33 B5 8C 04 60 BB 2B 0B 75 B3 0C 8C D4
DB60 A0 BB B3 E9 0C D3 02 D4 0B 74 B3 44 D4 0B 77 B3
DB70 0B 79 B1 0B 77 B0 B3 40 D4 0B 75 D3 8B 13 B5 8C
DB80 D8 AF BB 2A 3B 0A 7F B3 E9 0C D3 02 D4 0B D0 B3
DB90 0A 8F 10 B3 E9 0C D3 02 D4 0B 72 B3 0A 8F 11 B3
DBA0 E9 0C D3 02 D4 0B 73 B3 0A 8F 12 B3 E9 0C D3 02
DBB0 D4 CF 

Function $DB4B (FC FF) -> Create a CPU ship ID <00>?
Args:
<0C> Ship ID to create
Locs:
<0B> Pointer to slot (ID - 1)

DB50 0C
DB51 D1
DB52 8B 33
DB54 B5
DB55 8C 04 60
DB58 BB
DB59 2B          / Pointer to new ship

DB5A 0B
DB5B 75
DB5C B3
DB5D 0C
DB5E 8C D4 A0    / $A0D4
DB61 BB
DB62 B3
DB63 E9 0C D3 02 / Call $D30C -> get byte from Page FA
DB67 D4          / Ship[5] = $A0D4 + ID (Port of Origin)

DB68 0B
DB69 74
DB6A B3
DB6B 44
DB6C D4

DB6D 0B
DB6E 77
DB6F B3
DB70 0B
DB71 79
DB72 B1

DB73 0B
DB74 77
DB75 B0
DB76 B3
DB77 40
DB78 D4

DB79 0B
DB7A 75
DB7B D3
DB7C 8B 13
DB7E B5
DB7F 8C D8 AF .. / $AFD8
DB82 BB
DB83 2A          / City data

DB84 3B
DB85 0A
DB86 7F
DB87 B3
DB88 E9 0C D3 02 / Call $D30C -> Get byte from page FA
DB8C D4

DB8D 0B
DB8E D0
DB8F B3
DB90 0A
DB91 8F 10
DB93 B3
DB94 E9 0C D3 02 / Call $D30C -> Get byte from page FA
DB98 D4

DB99 0B
DB9A 72
DB9B B3
DB9C 0A
DB9D 8F 11
DB9F B3
DBA0 E9 0C D3 02 / Call $D30C -> Get byte from page FA
DBA4 D4

DBA5 0B
DBA6 73
DBA7 B3
DBA8 0A
DBA9 8F 12
DBAB B3
DBAC E9 0C D3 02 / Call $D30C -> Get byte from page FA
DBB0 D4

DBBA CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DBB0       20 BF E4 FA FF 0C 2B 0B D3 8B 20 C0 D7 E1
DBC0 DB 0B D3 59 C0 D7 E1 DB B7 18 00 00 00 00 B7 0E
DBD0 FA FF 0B D3 B3 89 30 B4 C3 D7 E6 DB B7 0C FA FF
DBE0 CF 0B D0 D6 B8 DB 0B D3 8B 39 C3 D8 DC DB B7 0C
DBF0 FA FF B7 19 0A 00 00 00 B7 01 B7 14 0B D0 2B D1
DC00 D3 8F D0 B7 25 B7 15 B7 03 D6 CE DB 

Function $DBB2 (FA FF)
Args:
<0C> Pointer to 8-bit value
Locs:
<0B>

DBB7 0C
DBB8 2B

DBB9 0B
DBBA D3
DBBB 8B 20
DBBD C0
DBBE D7 E1 DB

DBC1 0B
DBC2 D3
DBC3 59
DBC4 C0
DBC5 D7 E1 DB


		DBC8 B7 18 
			 00 00 00 00
		DBCE B7 0E FA FF
		DBD2 0B          
		DBD3 D3          
		DBD4 B3          
		DBD5 89 30
		DBD7 B4          
		DBD8 C3          
		DBD9 D7 E6 DB
		  
		DBDC B7 0C FA FF
		DBE0 CF      



	DBE1 0B
	DBE2 D0           
	DBE3 D6 B8 DB

DBE6 0B
DBE7 D3           
DBE8 8B 39        
DBEA C3          
DBEB D8 DC DB

DBEE B7 0C FA FF
DBF2 B7 19
     0A 00 00 00
DBF8 B7 01         ; mult
DBFA B7 14         ; push

DBFC 0B
DBFD D0
DBFE 2B
DBFF D1
DC00 D3
DC01 8F D0
DC03 B7 25         ; long sextend
DC05 B7 15         ; pop
DC07 B7 03         ; add
DC09 D6 CE DB
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DC00                                     20 BF E4 00
DC10 00 A0 0B 00 B3 89 61 B4 C3 D8 2D DC A0 0B 00 8B
DC20 7A C3 D8 2D DC A0 0B 00 8F E0 D6 30 DC A0 0B 00
DC30 CF 

Function $DC0C (00 00) - tolower(int)

DC11 A0 0B 00
DC14 B3
DC15 89 61
DC17 B4


     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DC00                                     20 BF E4 00
DC10 00 A0 0B 00 B3 89 61 B4 C3 D8 2D DC A0 0B 00 8B
DC20 7A C3 D8 2D DC A0 0B 00 8F E0 D6 30 DC A0 0B 00
DC30 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DC30    20 BF E4 00 00 A0 0B 00 B3 89 41 B4 C3 D8 52
DC40 DC A0 0B 00 8B 5A C3 D8 52 DC A0 0B 00 8F 20 D6
DC50 55 DC A0 0B 00 CF 

Function $DC31 (00 00) - toupper(int)

if (0x41 <= arg && arg <= 0x5A) {
	return arg+0x32;
}
return arg

DC36 A0 0B 00    /
DC39 B3          /
DC3A 89 41       /
DC3C B4          /
DC3D C3          / if 0x41 <= arg00
DC3E D8 52 DC    /

 DC41 A0 0B 00
 DC44 8B 5A
 DC46 C3
 DC47 D8 52 DC   / if arg00 <= 0x5A
 
  DC4A A0 0B 00  /
  DC4D 8F 20     / add 0x20
  DC4F D6 55 DC

DC52 A0 0B 00
DC55 CF

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DC40 DC A0 0B 00 8B 5A C3 D8 52 DC A0 0B 00 8F 20 D6
DC50 55 DC A0 0B 00 CF 
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DC50                   20 BF E4 00 00 0C 50 C2 D8 66
DC60 DC 89 FF D6 71 DC 0C 50 C4 D8 70 DC 41 D6 71 DC
DC70 40 CF 

Function $DC56
Returns -1, 1 or 0 if <arg00> is less than zero, greater than zero, or zero.

DC5B 0C          /
DC5C 50          /
DC5D C2          /
DC5E D8 66 DC    /

 if arg < 0 (signed)
 DC61 89 FF       /
 DC63 D6 71 DC    /

DC66 0C          /
DC67 50          /
DC68 C4          /
DC69 D8 70 DC    /

 else if arg > 0 (signed)
 DC6C 41
 DC6D D6 71 DC   /
 
 else
 DC70 40

DC71 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DC70       20 BF E4 00 00 AC 6C DD AC 8C DD AC E0 DD
DC80 AC B5 DD AC EC DC AC 3A DE AC 8B DE AC BF DE AC
DC90 A6 DE AC F3 DE CF 

Function $DC72 (00 00)
DC77 AC 6C DD    / Call $DD6C: getSmaller( num1, num2 )
DC7A AC 8D DD    / 
DC7D AC E0 DD    / 
DC80 AC B5 DD    / 
DC83 AC EC DC    / 
DC86 AC 3A DE    / 
DC89 AC 8B DE    / 
DC8C AC BF DE    / 
DC8F AC A6 DE    / 
DC92 AC F3 DE    / 
DC95 CF          / Return
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DC90                   20 BF E4 00 00 8E E0 00 0F D2
DCA0 D2 B3 0E 8B 18 B5 B4 BB 8C 4E DF BB B0 B3 0F D2
DCB0 D2 B3 0E 8B 18 B5 B4 BB 8C 4C DF BB B0 B3 62 62
DCC0 3D 3C 69 E9 D4 EE 10 CF 

Function $DC96 (00 00)
Print graphic <0E>,<0F> from table $DF4C to <0C>,<0D>

DC9B 8E E0 00    /
DC9E 0F          /
DC9F D2          /
DCA0 D2          /
DCA1 B3          /
DCA2 0E          /
DCA3 8B 18       /
DCA5 B5          /
DCA6 B4          /
DCA7 BB          /
DCA8 8C 4E DF    /
DCAB BB
DCAC B0
DCAD B3
DCAE 0F
DCAF D2
DCB0 D2
DCB1 B3
DCB2 0E
DCB3 8B 18
DCB5 B5
DCB6 B4
DCB7 BB
DCB8 8C 4C DF .. / $DF4C
DCBB BB
DCBC B0
DCBD B3
DCBE 62
DCBF 62
DCC0 3D
DCC1 3C
DCC2 69
DCC3 E9 D4 EE 10 / Call $EED4 -> Sysop 0x09
DCC7 CF
----------------------------------------------------
     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DCC0                         20 BF E4 00 00 8E E0 00
DCD0 0E D2 D2 8C AE DF BB B0 B3 0E D2 D2 8C AC DF BB
DCE0 B0 B3 62 62 3D 3C 69 E9 D4 EE 10 CF

Function $DCC8 (00 00)
Print graphic <0E> from table $DFAC to <0C>,<0D>

DCCD 8E E0 00    /
DCD0 0E          /
DCD1 D2          /
DCD2 D2          /
DCD3 8C AE DF    /
DCD6 BB          /
DCD7 B0          /
DCD8 B3          /
DCD9 0E          /
DCDA D2          /
DCDB D2          /
DCDC 8C AC DF    /
DCDF BB          /
DCE0 B0          /
DCE1 B3          /
DCE2 62          /
DCE3 62          /
DCE4 3D          /
DCE5 3C          /
DCE6 69          /
DCE7 E9 D4 EE 10 /
DCEB CF          /

     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
DCC0                         20 BF E4 00 00 8E E0 00
DCD0 0E D2 D2 8C AE DF BB B0 B3 0E D2 D2 8C AC DF BB
DCE0 B0 B3 62 62 3D 3C 69 E9 D4 EE 10 CF
====================================================

>1F:DCEC:A0 02     LDY #$02
 1F:DCEE:B1 02     LDA ($02),Y
 1F:DCF0:85 0C     STA $000C
 1F:DCF2:85 52     STA $0052
 1F:DCF4:A9 00     LDA #$00
 1F:DCF6:85 53     STA $0053
 1F:DCF8:A9 04     LDA #$04
 1F:DCFA:20 5A DD  JSR $DD5A
 
 1F:DCFD:A5 66     LDA $0066
 1F:DCFF:85 0E     STA $000E
 1F:DD01:A5 0C     LDA $000C
 1F:DD03:85 52     STA $0052
 
 1F:DD05:A0 04     LDY #$04
 1F:DD07:B1 02     LDA ($02),Y
 1F:DD09:85 54     STA $0054
 1F:DD0B:A9 00     LDA #$00
 1F:DD0D:85 53     STA $0053
 1F:DD0F:85 55     STA $0055
 1F:DD11:A9 03     LDA #$03
 1F:DD13:20 5A DD  JSR $DD5A
 
 1F:DD16:A0 06     LDY #$06
 1F:DD18:B1 02     LDA ($02),Y
 1F:DD1A:99 0A 00  STA $000A,Y
 1F:DD1D:C8        INY
 1F:DD1E:C0 0C     CPY #$0C
 1F:DD20:D0 F6     BNE $DD18
 
 1F:DD22:A0 00     LDY #$00
 1F:DD24:4C 39 DD  JMP $DD39
 
 1F:DD27:B1 10     LDA ($10),Y
 1F:DD29:91 12     STA ($12),Y
 1F:DD2B:E6 10     INC $0010
 1F:DD2D:D0 02     BNE $DD31
 1F:DD2F:E6 11     INC $0011
 1F:DD31:E6 12     INC $0012
 1F:DD33:D0 02     BNE $DD37
 1F:DD35:E6 13     INC $0013
 1F:DD37:C6 14     DEC $0014
 
 1F:DD39:A5 14     LDA $0014
 1F:DD3B:D0 EA     BNE $DD27
 1F:DD3D:A5 15     LDA $0015
 1F:DD3F:F0 05     BEQ $DD46
 1F:DD41:C6 15     DEC $0015
 1F:DD43:4C 27 DD  JMP $DD27
 
 1F:DD46:A5 0C     LDA $000C
 1F:DD48:85 52     STA $0052
 1F:DD4A:A5 0E     LDA $000E
 1F:DD4C:85 54     STA $0054
 1F:DD4E:A9 00     LDA #$00
 1F:DD50:85 53     STA $0053
 1F:DD52:85 55     STA $0055
 1F:DD54:A9 03     LDA #$03
 1F:DD56:20 5A DD  JSR $DD5A
 1F:DD59:60        RTS -----------------------------------------
----------------------------------------------------
Function $DD5A
 
 1F:DD5A:85 50     STA $0050 = #$11
 1F:DD5C:A9 00     LDA #$00
 1F:DD5E:85 51     STA $0051 = #$00
 1F:DD60:A9 DD     LDA #$DD
 1F:DD62:48        PHA
 1F:DD63:A9 6A     LDA #$6A
 1F:DD65:48        PHA
 1F:DD66:08        PHP
 1F:DD67:6C DE FF  JMP ($FFDE) = $F962
 1F:DD6A:EA        NOP
 1F:DD6B:60        RTS -----------------------------------------

----------------------------------------------------
Function $DD6C
getSmaller( num1, num2 )

 1F:DD6C:A0 05     LDY #$05
 1F:DD6E:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DD70:99 06 00  STA $0006,Y @ $0007 = #$8A
 1F:DD73:88        DEY
 1F:DD74:C0 01     CPY #$01
 1F:DD76:D0 F6     BNE $DD6E
 1F:DD78:A5 0B     LDA $000B = #$9C
 1F:DD7A:C5 09     CMP $0009 = #$00
 1F:DD7C:F0 05     BEQ $DD83
 1F:DD7E:B0 34     BCS $DDB4
 1F:DD80:4C AC DD  JMP $DDAC
 1F:DD83:A5 0A     LDA $000A = #$0D
 1F:DD85:C5 08     CMP $0008 = #$00
 1F:DD87:B0 2B     BCS $DDB4
 1F:DD89:4C AC DD  JMP $DDAC
 1F:DD8C:A0 05     LDY #$05
 1F:DD8E:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DD90:99 06 00  STA $0006,Y @ $0007 = #$8A
 1F:DD93:88        DEY
 1F:DD94:C0 01     CPY #$01
 1F:DD96:D0 F6     BNE $DD8E
 1F:DD98:A5 0B     LDA $000B = #$9C
 1F:DD9A:C5 09     CMP $0009 = #$00
 1F:DD9C:F0 05     BEQ $DDA3
 1F:DD9E:B0 0C     BCS $DDAC
 1F:DDA0:4C B4 DD  JMP $DDB4
 1F:DDA3:A5 0A     LDA $000A = #$0D
 1F:DDA5:C5 08     CMP $0008 = #$00
 1F:DDA7:B0 03     BCS $DDAC
 1F:DDA9:4C B4 DD  JMP $DDB4
 1F:DDAC:A5 0A     LDA $000A = #$0D
 1F:DDAE:85 08     STA $0008 = #$00
 1F:DDB0:A5 0B     LDA $000B = #$9C
 1F:DDB2:85 09     STA $0009 = #$00
 1F:DDB4:60        RTS -----------------------------------------
 1F:DDB5:A0 06     LDY #$06
 1F:DDB7:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DDB9:99 06 00  STA $0006,Y @ $0007 = #$8A
 1F:DDBC:88        DEY
 1F:DDBD:C0 01     CPY #$01
 1F:DDBF:D0 F6     BNE $DDB7
 1F:DDC1:85 0E     STA $000E = #$00
 1F:DDC3:A5 09     LDA $0009 = #$00
 1F:DDC5:85 0F     STA $000F = #$00
 1F:DDC7:A0 00     LDY #$00
 1F:DDC9:A6 0A     LDX $000A = #$0D
 1F:DDCB:F0 0E     BEQ $DDDB
 1F:DDCD:A5 0C     LDA $000C = #$04
 1F:DDCF:91 0E     STA ($0E),Y @ $0001 = #$EE
 1F:DDD1:E6 0C     INC $000C = #$04
 1F:DDD3:C8        INY
 1F:DDD4:D0 02     BNE $DDD8
 1F:DDD6:E6 0F     INC $000F = #$00
 1F:DDD8:CA        DEX
 1F:DDD9:D0 F2     BNE $DDCD
 1F:DDDB:C6 0B     DEC $000B = #$9C
 1F:DDDD:10 EE     BPL $DDCD
 1F:DDDF:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $DDE0 -> Transfer <04> values from <00> to <02>

 1F:DDE0:A0 07     LDY #$07
 
 1F:DDE2:B1 02     LDA ($02),Y
 1F:DDE4:99 08 00  STA $0008,Y
 1F:DDE7:88        DEY
 1F:DDE8:10 F8     BPL $DDE2
 
 1F:DDEA:A2 00     LDX #$00
 1F:DDEC:A5 0E     LDA $000E
 1F:DDEE:D0 06     BNE $DDF6
 
 1F:DDF0:A5 0F     LDA $000F
 1F:DDF2:F0 17     BEQ $DE0B
 
 1F:DDF4:C6 0F     DEC $000F
 
 1F:DDF6:A1 0A     LDA ($0A,X)
 1F:DDF8:81 0C     STA ($0C,X)
 1F:DDFA:E6 0A     INC $000A
 1F:DDFC:D0 02     BNE $DE00
 1F:DDFE:E6 0B     INC $000B
 
 1F:DE00:E6 0C     INC $000C
 1F:DE02:D0 02     BNE $DE06
 1F:DE04:E6 0D     INC $000D
 
 1F:DE06:C6 0E     DEC $000E
 1F:DE08:4C EC DD  JMP $DDEC
 
 1F:DE0B:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $DE0C

 1F:DE0C:6C 0C 00  JMP ($000C) = $0004
----------------------------------------------------------------
Function $DE0F

 1F:DE0F:A0 02     LDY #$02
 1F:DE11:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DE13:99 50 00  STA $0050,Y @ $0051 = #$00
 1F:DE16:C8        INY
 1F:DE17:C0 06     CPY #$06
 1F:DE19:D0 F6     BNE $DE11
 1F:DE1B:A9 03     LDA #$03
 1F:DE1D:20 F4 EE  JSR $EEF4
 1F:DE20:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $DE21

 1F:DE21:A0 02     LDY #$02
 1F:DE23:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DE25:85 52     STA $0052 = #$0A
 1F:DE27:C8        INY
 1F:DE28:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DE2A:85 53     STA $0053 = #$00
 1F:DE2C:A9 04     LDA #$04
 1F:DE2E:20 F4 EE  JSR $EEF4
 1F:DE31:A5 66     LDA $0066
 1F:DE33:85 08     STA $0008
 1F:DE35:A5 67     LDA $0067
 1F:DE37:85 09     STA $0009
 1F:DE39:60        RTS -----------------------------------------
 1F:DE3A:20 21 DE  JSR $DE21
 1F:DE3D:20 0F DE  JSR $DE0F
 1F:DE40:A5 08     LDA $0008 = #$00
 1F:DE42:A0 04     LDY #$04
 1F:DE44:91 02     STA ($02),Y @ $05B5 = #$8A
 1F:DE46:C8        INY
 1F:DE47:A5 09     LDA $0009 = #$00
 1F:DE49:91 02     STA ($02),Y @ $05B5 = #$8A
 1F:DE4B:A0 06     LDY #$06
 1F:DE4D:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DE4F:85 0C     STA $000C = #$04
 1F:DE51:C8        INY
 1F:DE52:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DE54:85 0D     STA $000D = #$00
 1F:DE56:18        CLC
 1F:DE57:A5 02     LDA $0002 = #$B4
 1F:DE59:69 06     ADC #$06
 1F:DE5B:85 00     STA $0000 = #$D4
 1F:DE5D:A9 00     LDA #$00
 1F:DE5F:65 03     ADC $0003 = #$05
 1F:DE61:85 01     STA $0001 = #$EE
 1F:DE63:38        SEC
 1F:DE64:A5 02     LDA $0002 = #$B4
 1F:DE66:E9 10     SBC #$10
 1F:DE68:85 02     STA $0002 = #$B4
 1F:DE6A:B0 02     BCS $DE6E
 1F:DE6C:C6 03     DEC $0003 = #$05
 1F:DE6E:A0 02     LDY #$02
 1F:DE70:B1 00     LDA ($00),Y @ $EED5 = #$17
 1F:DE72:91 02     STA ($02),Y @ $05B5 = #$8A
 1F:DE74:C8        INY
 1F:DE75:C0 10     CPY #$10
 1F:DE77:D0 F7     BNE $DE70
 1F:DE79:20 0C DE  JSR $DE0C
 1F:DE7C:18        CLC
 1F:DE7D:A5 02     LDA $0002 = #$B4
 1F:DE7F:69 10     ADC #$10
 1F:DE81:85 02     STA $0002 = #$B4
 1F:DE83:90 02     BCC $DE87
 1F:DE85:E6 03     INC $0003 = #$05
 1F:DE87:20 0F DE  JSR $DE0F
 1F:DE8A:60        RTS -----------------------------------------
 1F:DE8B:A0 02     LDY #$02
 1F:DE8D:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DE8F:85 08     STA $0008 = #$00
 1F:DE91:C8        INY
 1F:DE92:B1 02     LDA ($02),Y @ $05B5 = #$8A
 1F:DE94:85 09     STA $0009 = #$00
 1F:DE96:10 0D     BPL $DEA5
 1F:DE98:49 FF     EOR #$FF
 1F:DE9A:85 09     STA $0009 = #$00
 1F:DE9C:A5 08     LDA $0008 = #$00
 1F:DE9E:49 FF     EOR #$FF
 1F:DEA0:18        CLC
 1F:DEA1:69 01     ADC #$01
 1F:DEA3:85 08     STA $0008 = #$00
 1F:DEA5:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $DEA6

 1F:DEA6:A0 05     LDY #$05
 for
	 1F:DEA8:B1 02     LDA ($02),Y
	 1F:DEAA:99 06 00  STA $0006,Y
	 1F:DEAD:88        DEY
	 1F:DEAE:C0 01     CPY #$01
	 1F:DEB0:D0 F6     BNE $DEA8
 
 1F:DEB2:A5 08     LDA $0008
 1F:DEB4:85 0C     STA $000C
 1F:DEB6:A5 09     LDA $0009
 1F:DEB8:85 0D     STA $000D
 1F:DEBA:A0 00     LDY #$00
 1F:DEBC:4C E2 DE  JMP $DEE2
----------------------------------------------------------------
Function $DEBF

 1F:DEBF:A0 05     LDY #$05
 1F:DEC1:B1 02     LDA ($02),Y
 1F:DEC3:99 06 00  STA $0006,Y
 1F:DEC6:88        DEY
 1F:DEC7:C0 01     CPY #$01
 1F:DEC9:D0 F6     BNE $DEC1
 1F:DECB:A5 08     LDA $0008
 1F:DECD:85 0C     STA $000C
 1F:DECF:A5 09     LDA $0009
 1F:DED1:85 0D     STA $000D
 1F:DED3:A0 00     LDY #$00
 1F:DED5:B1 0C     LDA ($0C),Y
 1F:DED7:F0 09     BEQ $DEE2
 1F:DED9:E6 0C     INC $000C
 1F:DEDB:D0 F8     BNE $DED5
 1F:DEDD:E6 0D     INC $000D
 1F:DEDF:4C D5 DE  JMP $DED5
----------------------------------------------------------------
Function $DEE2 
Transfer string from $0A to $0C

 1F:DEE2:B1 0A     LDA ($0A),Y
 1F:DEE4:91 0C     STA ($0C),Y
 1F:DEE6:F0 0A     BEQ $DEF2
 1F:DEE8:C8        INY
 1F:DEE9:D0 F7     BNE $DEE2
 1F:DEEB:E6 0B     INC $000B
 1F:DEED:E6 0D     INC $000D
 1F:DEEF:4C E2 DE  JMP $DEE2
 1F:DEF2:60        RTS -----------------------------------------
----------------------------------------------------------------
Function $DEF3
 1F:DEF3:A0 03     LDY #$03
 1F:DEF5:B1 02     LDA ($02),Y
 1F:DEF7:85 0B     STA $000B
 1F:DEF9:88        DEY
 1F:DEFA:B1 02     LDA ($02),Y
 1F:DEFC:85 0A     STA $000A
 1F:DEFE:A0 00     LDY #$00
 1F:DF00:84 08     STY $0008
 1F:DF02:84 09     STY $0009
 1F:DF04:B1 0A     LDA ($0A),Y
 1F:DF06:F0 08     BEQ $DF10
 1F:DF08:C8        INY
 1F:DF09:D0 F9     BNE $DF04
 1F:DF0B:E6 09     INC $0009
 1F:DF0D:4C 04 DF  JMP $DF04
 1F:DF10:84 08     STY $0008
 1F:DF12:60        RTS -----------------------------------------
----------------------------------------------------------------
Pointer table $DF4C
    00           01           02           03           04           05
00: C4 A0 C8 A0  D4 A0 D8 A0  DC A0 E0 A0  CC A0 D0 A0  EC A0 F0 A0  E4 A0 E8 A0 
01: 94 A0 98 A0  A4 A0 A8 A0  AC A0 B0 A0  9C A0 A0 A0  BC A0 C0 A0  B4 A0 B8 A0
02: 24 A1 28 A1  34 A1 38 A1  3C A1 40 A1  2C A1 30 A1  4C A1 50 A1  44 A1 48 A1
03: F4 A0 F8 A0  04 A1 08 A1  0C A1 10 A1  FC A0 00 A1  1C A1 20 A1  14 A1 18 A1
----------------------------------------------------------------

Pointer table $DFAC

00: 04 A0 08 A0 
01: 0C A0 10 A0 
02: 14 A0 18 A0 
03: 1C A0 20 A0 
04: 24 A0 28 A0 
05: 2C A0 30 A0